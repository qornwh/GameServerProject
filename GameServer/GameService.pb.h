// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameService_2eproto;
namespace protocol {
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Monster;
struct MonsterDefaultTypeInternal;
extern MonsterDefaultTypeInternal _Monster_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SChat;
struct SChatDefaultTypeInternal;
extern SChatDefaultTypeInternal _SChat_default_instance_;
class SClosePlayer;
struct SClosePlayerDefaultTypeInternal;
extern SClosePlayerDefaultTypeInternal _SClosePlayer_default_instance_;
class SInsertplayer;
struct SInsertplayerDefaultTypeInternal;
extern SInsertplayerDefaultTypeInternal _SInsertplayer_default_instance_;
class SLoad;
struct SLoadDefaultTypeInternal;
extern SLoadDefaultTypeInternal _SLoad_default_instance_;
class SMove;
struct SMoveDefaultTypeInternal;
extern SMoveDefaultTypeInternal _SMove_default_instance_;
class SMoves;
struct SMovesDefaultTypeInternal;
extern SMovesDefaultTypeInternal _SMoves_default_instance_;
class SPlayerData;
struct SPlayerDataDefaultTypeInternal;
extern SPlayerDataDefaultTypeInternal _SPlayerData_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Login* Arena::CreateMaybeMessage<::protocol::Login>(Arena*);
template<> ::protocol::Monster* Arena::CreateMaybeMessage<::protocol::Monster>(Arena*);
template<> ::protocol::Player* Arena::CreateMaybeMessage<::protocol::Player>(Arena*);
template<> ::protocol::Position* Arena::CreateMaybeMessage<::protocol::Position>(Arena*);
template<> ::protocol::SChat* Arena::CreateMaybeMessage<::protocol::SChat>(Arena*);
template<> ::protocol::SClosePlayer* Arena::CreateMaybeMessage<::protocol::SClosePlayer>(Arena*);
template<> ::protocol::SInsertplayer* Arena::CreateMaybeMessage<::protocol::SInsertplayer>(Arena*);
template<> ::protocol::SLoad* Arena::CreateMaybeMessage<::protocol::SLoad>(Arena*);
template<> ::protocol::SMove* Arena::CreateMaybeMessage<::protocol::SMove>(Arena*);
template<> ::protocol::SMoves* Arena::CreateMaybeMessage<::protocol::SMoves>(Arena*);
template<> ::protocol::SPlayerData* Arena::CreateMaybeMessage<::protocol::SPlayerData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum MessageCode : int {
  LOGIN = 0,
  S_LOAD = 1,
  S_INSERTPLAYER = 2,
  S_MOVE = 3,
  S_CHAT = 4,
  S_PLAYERDATA = 5,
  S_CLOSEPLAYER = 6,
  S_MOVES = 7,
  MessageCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageCode_IsValid(int value);
constexpr MessageCode MessageCode_MIN = LOGIN;
constexpr MessageCode MessageCode_MAX = S_MOVES;
constexpr int MessageCode_ARRAYSIZE = MessageCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageCode_descriptor();
template<typename T>
inline const std::string& MessageCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageCode_descriptor(), enum_t_value);
}
inline bool MessageCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageCode>(
    MessageCode_descriptor(), name, value);
}
// ===================================================================

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit PROTOBUF_CONSTEXPR Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login& from) {
    Login::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kHpFieldNumber = 100,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 hp = 100;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t type_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kPositionFieldNumber = 4,
    kTypeFieldNumber = 1,
    kHpFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 code = 3;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::protocol::Position* position_;
    uint32_t type_;
    uint32_t hp_;
    uint32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Monster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Monster) */ {
 public:
  inline Monster() : Monster(nullptr) {}
  ~Monster() override;
  explicit PROTOBUF_CONSTEXPR Monster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Monster(const Monster& from);
  Monster(Monster&& from) noexcept
    : Monster() {
    *this = ::std::move(from);
  }

  inline Monster& operator=(const Monster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Monster& operator=(Monster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Monster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Monster* internal_default_instance() {
    return reinterpret_cast<const Monster*>(
               &_Monster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Monster& a, Monster& b) {
    a.Swap(&b);
  }
  inline void Swap(Monster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Monster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Monster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Monster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Monster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Monster& from) {
    Monster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Monster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Monster";
  }
  protected:
  explicit Monster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kPositionFieldNumber = 4,
    kTypeFieldNumber = 1,
    kHpFieldNumber = 2,
    kCodeFieldNumber = 3,
    kStateFieldNumber = 6,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 code = 3;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // uint32 state = 6;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Monster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::protocol::Position* position_;
    uint32_t type_;
    uint32_t hp_;
    uint32_t code_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SLoad) */ {
 public:
  inline SLoad() : SLoad(nullptr) {}
  ~SLoad() override;
  explicit PROTOBUF_CONSTEXPR SLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLoad(const SLoad& from);
  SLoad(SLoad&& from) noexcept
    : SLoad() {
    *this = ::std::move(from);
  }

  inline SLoad& operator=(const SLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLoad& operator=(SLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLoad* internal_default_instance() {
    return reinterpret_cast<const SLoad*>(
               &_SLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SLoad& a, SLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(SLoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SLoad& from) {
    SLoad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SLoad";
  }
  protected:
  explicit SLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kMonsterFieldNumber = 2,
  };
  // repeated .protocol.Player player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::protocol::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
      mutable_player();
  private:
  const ::protocol::Player& _internal_player(int index) const;
  ::protocol::Player* _internal_add_player();
  public:
  const ::protocol::Player& player(int index) const;
  ::protocol::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
      player() const;

  // repeated .protocol.Monster monster = 2;
  int monster_size() const;
  private:
  int _internal_monster_size() const;
  public:
  void clear_monster();
  ::protocol::Monster* mutable_monster(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >*
      mutable_monster();
  private:
  const ::protocol::Monster& _internal_monster(int index) const;
  ::protocol::Monster* _internal_add_monster();
  public:
  const ::protocol::Monster& monster(int index) const;
  ::protocol::Monster* add_monster();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >&
      monster() const;

  // @@protoc_insertion_point(class_scope:protocol.SLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player > player_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster > monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SInsertplayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SInsertplayer) */ {
 public:
  inline SInsertplayer() : SInsertplayer(nullptr) {}
  ~SInsertplayer() override;
  explicit PROTOBUF_CONSTEXPR SInsertplayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SInsertplayer(const SInsertplayer& from);
  SInsertplayer(SInsertplayer&& from) noexcept
    : SInsertplayer() {
    *this = ::std::move(from);
  }

  inline SInsertplayer& operator=(const SInsertplayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInsertplayer& operator=(SInsertplayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SInsertplayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SInsertplayer* internal_default_instance() {
    return reinterpret_cast<const SInsertplayer*>(
               &_SInsertplayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SInsertplayer& a, SInsertplayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SInsertplayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInsertplayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SInsertplayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SInsertplayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SInsertplayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SInsertplayer& from) {
    SInsertplayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInsertplayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SInsertplayer";
  }
  protected:
  explicit SInsertplayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::protocol::Player& player() const;
  PROTOBUF_NODISCARD ::protocol::Player* release_player();
  ::protocol::Player* mutable_player();
  void set_allocated_player(::protocol::Player* player);
  private:
  const ::protocol::Player& _internal_player() const;
  ::protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::protocol::Player* player);
  ::protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:protocol.SInsertplayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Player* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SMove) */ {
 public:
  inline SMove() : SMove(nullptr) {}
  ~SMove() override;
  explicit PROTOBUF_CONSTEXPR SMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMove(const SMove& from);
  SMove(SMove&& from) noexcept
    : SMove() {
    *this = ::std::move(from);
  }

  inline SMove& operator=(const SMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMove& operator=(SMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMove* internal_default_instance() {
    return reinterpret_cast<const SMove*>(
               &_SMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SMove& a, SMove& b) {
    a.Swap(&b);
  }
  inline void Swap(SMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SMove& from) {
    SMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SMove";
  }
  protected:
  explicit SMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kCodeFieldNumber = 1,
    kIsMonsterFieldNumber = 3,
  };
  // .protocol.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // bool is_monster = 3;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Position* position_;
    uint32_t code_;
    bool is_monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SChat) */ {
 public:
  inline SChat() : SChat(nullptr) {}
  ~SChat() override;
  explicit PROTOBUF_CONSTEXPR SChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SChat(const SChat& from);
  SChat(SChat&& from) noexcept
    : SChat() {
    *this = ::std::move(from);
  }

  inline SChat& operator=(const SChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChat& operator=(SChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SChat* internal_default_instance() {
    return reinterpret_cast<const SChat*>(
               &_SChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SChat& a, SChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SChat& from) {
    SChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SChat";
  }
  protected:
  explicit SChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string text = 5;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 code = 2;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t type_;
    uint32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SPlayerData) */ {
 public:
  inline SPlayerData() : SPlayerData(nullptr) {}
  ~SPlayerData() override;
  explicit PROTOBUF_CONSTEXPR SPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPlayerData(const SPlayerData& from);
  SPlayerData(SPlayerData&& from) noexcept
    : SPlayerData() {
    *this = ::std::move(from);
  }

  inline SPlayerData& operator=(const SPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPlayerData& operator=(SPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPlayerData* internal_default_instance() {
    return reinterpret_cast<const SPlayerData*>(
               &_SPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SPlayerData& a, SPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(SPlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SPlayerData& from) {
    SPlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SPlayerData";
  }
  protected:
  explicit SPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::protocol::Player& player() const;
  PROTOBUF_NODISCARD ::protocol::Player* release_player();
  ::protocol::Player* mutable_player();
  void set_allocated_player(::protocol::Player* player);
  private:
  const ::protocol::Player& _internal_player() const;
  ::protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::protocol::Player* player);
  ::protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:protocol.SPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Player* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SClosePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SClosePlayer) */ {
 public:
  inline SClosePlayer() : SClosePlayer(nullptr) {}
  ~SClosePlayer() override;
  explicit PROTOBUF_CONSTEXPR SClosePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SClosePlayer(const SClosePlayer& from);
  SClosePlayer(SClosePlayer&& from) noexcept
    : SClosePlayer() {
    *this = ::std::move(from);
  }

  inline SClosePlayer& operator=(const SClosePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SClosePlayer& operator=(SClosePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SClosePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SClosePlayer* internal_default_instance() {
    return reinterpret_cast<const SClosePlayer*>(
               &_SClosePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SClosePlayer& a, SClosePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SClosePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SClosePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SClosePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SClosePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SClosePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SClosePlayer& from) {
    SClosePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SClosePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SClosePlayer";
  }
  protected:
  explicit SClosePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // uint32 code = 1;
  void clear_code();
  uint32_t code() const;
  void set_code(uint32_t value);
  private:
  uint32_t _internal_code() const;
  void _internal_set_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SClosePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SMoves final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SMoves) */ {
 public:
  inline SMoves() : SMoves(nullptr) {}
  ~SMoves() override;
  explicit PROTOBUF_CONSTEXPR SMoves(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMoves(const SMoves& from);
  SMoves(SMoves&& from) noexcept
    : SMoves() {
    *this = ::std::move(from);
  }

  inline SMoves& operator=(const SMoves& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMoves& operator=(SMoves&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SMoves& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMoves* internal_default_instance() {
    return reinterpret_cast<const SMoves*>(
               &_SMoves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SMoves& a, SMoves& b) {
    a.Swap(&b);
  }
  inline void Swap(SMoves* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMoves* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMoves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMoves>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SMoves& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SMoves& from) {
    SMoves::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMoves* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SMoves";
  }
  protected:
  explicit SMoves(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveFieldNumber = 1,
  };
  // repeated .protocol.SMove move = 1;
  int move_size() const;
  private:
  int _internal_move_size() const;
  public:
  void clear_move();
  ::protocol::SMove* mutable_move(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SMove >*
      mutable_move();
  private:
  const ::protocol::SMove& _internal_move(int index) const;
  ::protocol::SMove* _internal_add_move();
  public:
  const ::protocol::SMove& move(int index) const;
  ::protocol::SMove* add_move();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SMove >&
      move() const;

  // @@protoc_insertion_point(class_scope:protocol.SMoves)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SMove > move_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string name = 1;
inline void Login::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:protocol.Login.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Login.name)
}
inline std::string* Login::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.Login.name)
  return _s;
}
inline const std::string& Login::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Login::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Login.name)
  return _impl_.name_.Release();
}
inline void Login::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Login.name)
}

// int32 type = 2;
inline void Login::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Login::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Login::type() const {
  // @@protoc_insertion_point(field_get:protocol.Login.type)
  return _internal_type();
}
inline void Login::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Login::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.Login.type)
}

// int32 hp = 100;
inline void Login::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t Login::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t Login::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Login.hp)
  return _internal_hp();
}
inline void Login::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void Login::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Login.hp)
}

// -------------------------------------------------------------------

// Position

// int32 x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t Position::_internal_x() const {
  return _impl_.x_;
}
inline int32_t Position::x() const {
  // @@protoc_insertion_point(field_get:protocol.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.Position.x)
}

// int32 y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t Position::_internal_y() const {
  return _impl_.y_;
}
inline int32_t Position::y() const {
  // @@protoc_insertion_point(field_get:protocol.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.Position.y)
}

// int32 z = 3;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t Position::_internal_z() const {
  return _impl_.z_;
}
inline int32_t Position::z() const {
  // @@protoc_insertion_point(field_get:protocol.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:protocol.Position.z)
}

// float yaw = 4;
inline void Position::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Position::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Position::yaw() const {
  // @@protoc_insertion_point(field_get:protocol.Position.yaw)
  return _internal_yaw();
}
inline void Position::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Position::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:protocol.Position.yaw)
}

// -------------------------------------------------------------------

// Player

// uint32 type = 1;
inline void Player::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Player::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Player::type() const {
  // @@protoc_insertion_point(field_get:protocol.Player.type)
  return _internal_type();
}
inline void Player::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Player::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.Player.type)
}

// uint32 hp = 2;
inline void Player::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t Player::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t Player::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Player.hp)
  return _internal_hp();
}
inline void Player::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void Player::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Player.hp)
}

// uint32 code = 3;
inline void Player::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t Player::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t Player::code() const {
  // @@protoc_insertion_point(field_get:protocol.Player.code)
  return _internal_code();
}
inline void Player::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void Player::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Player.code)
}

// .protocol.Position position = 4;
inline bool Player::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Player::has_position() const {
  return _internal_has_position();
}
inline void Player::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& Player::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& Player::position() const {
  // @@protoc_insertion_point(field_get:protocol.Player.position)
  return _internal_position();
}
inline void Player::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Player.position)
}
inline ::protocol::Position* Player::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* Player::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.Player.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* Player::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* Player::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.Player.position)
  return _msg;
}
inline void Player::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.Player.position)
}

// string name = 5;
inline void Player::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.Player.name)
  return _s;
}
inline const std::string& Player::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Player.name)
  return _impl_.name_.Release();
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Player.name)
}

// -------------------------------------------------------------------

// Monster

// uint32 type = 1;
inline void Monster::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Monster::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Monster::type() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.type)
  return _internal_type();
}
inline void Monster::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Monster::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.Monster.type)
}

// uint32 hp = 2;
inline void Monster::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t Monster::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t Monster::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.hp)
  return _internal_hp();
}
inline void Monster::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void Monster::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Monster.hp)
}

// uint32 code = 3;
inline void Monster::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t Monster::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t Monster::code() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.code)
  return _internal_code();
}
inline void Monster::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void Monster::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Monster.code)
}

// .protocol.Position position = 4;
inline bool Monster::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Monster::has_position() const {
  return _internal_has_position();
}
inline void Monster::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& Monster::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& Monster::position() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.position)
  return _internal_position();
}
inline void Monster::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Monster.position)
}
inline ::protocol::Position* Monster::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* Monster::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.Monster.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* Monster::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* Monster::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.Monster.position)
  return _msg;
}
inline void Monster::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.Monster.position)
}

// string name = 5;
inline void Monster::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Monster::name() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Monster::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Monster.name)
}
inline std::string* Monster::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.Monster.name)
  return _s;
}
inline const std::string& Monster::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Monster::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Monster::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Monster::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Monster.name)
  return _impl_.name_.Release();
}
inline void Monster::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Monster.name)
}

// uint32 state = 6;
inline void Monster::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t Monster::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t Monster::state() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.state)
  return _internal_state();
}
inline void Monster::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void Monster::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.Monster.state)
}

// -------------------------------------------------------------------

// SLoad

// repeated .protocol.Player player = 1;
inline int SLoad::_internal_player_size() const {
  return _impl_.player_.size();
}
inline int SLoad::player_size() const {
  return _internal_player_size();
}
inline void SLoad::clear_player() {
  _impl_.player_.Clear();
}
inline ::protocol::Player* SLoad::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SLoad.player)
  return _impl_.player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
SLoad::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SLoad.player)
  return &_impl_.player_;
}
inline const ::protocol::Player& SLoad::_internal_player(int index) const {
  return _impl_.player_.Get(index);
}
inline const ::protocol::Player& SLoad::player(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SLoad.player)
  return _internal_player(index);
}
inline ::protocol::Player* SLoad::_internal_add_player() {
  return _impl_.player_.Add();
}
inline ::protocol::Player* SLoad::add_player() {
  ::protocol::Player* _add = _internal_add_player();
  // @@protoc_insertion_point(field_add:protocol.SLoad.player)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
SLoad::player() const {
  // @@protoc_insertion_point(field_list:protocol.SLoad.player)
  return _impl_.player_;
}

// repeated .protocol.Monster monster = 2;
inline int SLoad::_internal_monster_size() const {
  return _impl_.monster_.size();
}
inline int SLoad::monster_size() const {
  return _internal_monster_size();
}
inline void SLoad::clear_monster() {
  _impl_.monster_.Clear();
}
inline ::protocol::Monster* SLoad::mutable_monster(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SLoad.monster)
  return _impl_.monster_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >*
SLoad::mutable_monster() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SLoad.monster)
  return &_impl_.monster_;
}
inline const ::protocol::Monster& SLoad::_internal_monster(int index) const {
  return _impl_.monster_.Get(index);
}
inline const ::protocol::Monster& SLoad::monster(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SLoad.monster)
  return _internal_monster(index);
}
inline ::protocol::Monster* SLoad::_internal_add_monster() {
  return _impl_.monster_.Add();
}
inline ::protocol::Monster* SLoad::add_monster() {
  ::protocol::Monster* _add = _internal_add_monster();
  // @@protoc_insertion_point(field_add:protocol.SLoad.monster)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >&
SLoad::monster() const {
  // @@protoc_insertion_point(field_list:protocol.SLoad.monster)
  return _impl_.monster_;
}

// -------------------------------------------------------------------

// SInsertplayer

// .protocol.Player player = 1;
inline bool SInsertplayer::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool SInsertplayer::has_player() const {
  return _internal_has_player();
}
inline void SInsertplayer::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::protocol::Player& SInsertplayer::_internal_player() const {
  const ::protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Player&>(
      ::protocol::_Player_default_instance_);
}
inline const ::protocol::Player& SInsertplayer::player() const {
  // @@protoc_insertion_point(field_get:protocol.SInsertplayer.player)
  return _internal_player();
}
inline void SInsertplayer::unsafe_arena_set_allocated_player(
    ::protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SInsertplayer.player)
}
inline ::protocol::Player* SInsertplayer::release_player() {
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Player* SInsertplayer::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:protocol.SInsertplayer.player)
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::protocol::Player* SInsertplayer::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::protocol::Player* SInsertplayer::mutable_player() {
  ::protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:protocol.SInsertplayer.player)
  return _msg;
}
inline void SInsertplayer::set_allocated_player(::protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.SInsertplayer.player)
}

// -------------------------------------------------------------------

// SMove

// uint32 code = 1;
inline void SMove::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t SMove::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t SMove::code() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.code)
  return _internal_code();
}
inline void SMove::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void SMove::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SMove.code)
}

// .protocol.Position position = 2;
inline bool SMove::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool SMove::has_position() const {
  return _internal_has_position();
}
inline void SMove::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& SMove::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& SMove::position() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.position)
  return _internal_position();
}
inline void SMove::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SMove.position)
}
inline ::protocol::Position* SMove::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* SMove::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.SMove.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* SMove::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* SMove::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.SMove.position)
  return _msg;
}
inline void SMove::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.SMove.position)
}

// bool is_monster = 3;
inline void SMove::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool SMove::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool SMove::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.is_monster)
  return _internal_is_monster();
}
inline void SMove::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void SMove::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.SMove.is_monster)
}

// -------------------------------------------------------------------

// SChat

// uint32 type = 1;
inline void SChat::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t SChat::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t SChat::type() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.type)
  return _internal_type();
}
inline void SChat::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void SChat::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.SChat.type)
}

// uint32 code = 2;
inline void SChat::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t SChat::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t SChat::code() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.code)
  return _internal_code();
}
inline void SChat::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void SChat::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SChat.code)
}

// string text = 5;
inline void SChat::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& SChat::text() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SChat::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SChat.text)
}
inline std::string* SChat::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:protocol.SChat.text)
  return _s;
}
inline const std::string& SChat::_internal_text() const {
  return _impl_.text_.Get();
}
inline void SChat::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* SChat::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* SChat::release_text() {
  // @@protoc_insertion_point(field_release:protocol.SChat.text)
  return _impl_.text_.Release();
}
inline void SChat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SChat.text)
}

// -------------------------------------------------------------------

// SPlayerData

// .protocol.Player player = 1;
inline bool SPlayerData::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool SPlayerData::has_player() const {
  return _internal_has_player();
}
inline void SPlayerData::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::protocol::Player& SPlayerData::_internal_player() const {
  const ::protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Player&>(
      ::protocol::_Player_default_instance_);
}
inline const ::protocol::Player& SPlayerData::player() const {
  // @@protoc_insertion_point(field_get:protocol.SPlayerData.player)
  return _internal_player();
}
inline void SPlayerData::unsafe_arena_set_allocated_player(
    ::protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SPlayerData.player)
}
inline ::protocol::Player* SPlayerData::release_player() {
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Player* SPlayerData::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:protocol.SPlayerData.player)
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::protocol::Player* SPlayerData::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::protocol::Player* SPlayerData::mutable_player() {
  ::protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:protocol.SPlayerData.player)
  return _msg;
}
inline void SPlayerData::set_allocated_player(::protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.SPlayerData.player)
}

// -------------------------------------------------------------------

// SClosePlayer

// uint32 code = 1;
inline void SClosePlayer::clear_code() {
  _impl_.code_ = 0u;
}
inline uint32_t SClosePlayer::_internal_code() const {
  return _impl_.code_;
}
inline uint32_t SClosePlayer::code() const {
  // @@protoc_insertion_point(field_get:protocol.SClosePlayer.code)
  return _internal_code();
}
inline void SClosePlayer::_internal_set_code(uint32_t value) {
  
  _impl_.code_ = value;
}
inline void SClosePlayer::set_code(uint32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SClosePlayer.code)
}

// -------------------------------------------------------------------

// SMoves

// repeated .protocol.SMove move = 1;
inline int SMoves::_internal_move_size() const {
  return _impl_.move_.size();
}
inline int SMoves::move_size() const {
  return _internal_move_size();
}
inline void SMoves::clear_move() {
  _impl_.move_.Clear();
}
inline ::protocol::SMove* SMoves::mutable_move(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SMoves.move)
  return _impl_.move_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SMove >*
SMoves::mutable_move() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SMoves.move)
  return &_impl_.move_;
}
inline const ::protocol::SMove& SMoves::_internal_move(int index) const {
  return _impl_.move_.Get(index);
}
inline const ::protocol::SMove& SMoves::move(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SMoves.move)
  return _internal_move(index);
}
inline ::protocol::SMove* SMoves::_internal_add_move() {
  return _impl_.move_.Add();
}
inline ::protocol::SMove* SMoves::add_move() {
  ::protocol::SMove* _add = _internal_add_move();
  // @@protoc_insertion_point(field_add:protocol.SMoves.move)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SMove >&
SMoves::move() const {
  // @@protoc_insertion_point(field_list:protocol.SMoves.move)
  return _impl_.move_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::MessageCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MessageCode>() {
  return ::protocol::MessageCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto
