// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameService_2eproto;
namespace protocol {
class Attack;
struct AttackDefaultTypeInternal;
extern AttackDefaultTypeInternal _Attack_default_instance_;
class Buff;
struct BuffDefaultTypeInternal;
extern BuffDefaultTypeInternal _Buff_default_instance_;
class CMovePotal;
struct CMovePotalDefaultTypeInternal;
extern CMovePotalDefaultTypeInternal _CMovePotal_default_instance_;
class CPlayerAttack;
struct CPlayerAttackDefaultTypeInternal;
extern CPlayerAttackDefaultTypeInternal _CPlayerAttack_default_instance_;
class Demage;
struct DemageDefaultTypeInternal;
extern DemageDefaultTypeInternal _Demage_default_instance_;
class Login;
struct LoginDefaultTypeInternal;
extern LoginDefaultTypeInternal _Login_default_instance_;
class Monster;
struct MonsterDefaultTypeInternal;
extern MonsterDefaultTypeInternal _Monster_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class SChat;
struct SChatDefaultTypeInternal;
extern SChatDefaultTypeInternal _SChat_default_instance_;
class SClosePlayer;
struct SClosePlayerDefaultTypeInternal;
extern SClosePlayerDefaultTypeInternal _SClosePlayer_default_instance_;
class SInsertplayer;
struct SInsertplayerDefaultTypeInternal;
extern SInsertplayerDefaultTypeInternal _SInsertplayer_default_instance_;
class SLoad;
struct SLoadDefaultTypeInternal;
extern SLoadDefaultTypeInternal _SLoad_default_instance_;
class SMove;
struct SMoveDefaultTypeInternal;
extern SMoveDefaultTypeInternal _SMove_default_instance_;
class SPlayerData;
struct SPlayerDataDefaultTypeInternal;
extern SPlayerDataDefaultTypeInternal _SPlayerData_default_instance_;
class SRoomQuest;
struct SRoomQuestDefaultTypeInternal;
extern SRoomQuestDefaultTypeInternal _SRoomQuest_default_instance_;
class SUnitAttack;
struct SUnitAttackDefaultTypeInternal;
extern SUnitAttackDefaultTypeInternal _SUnitAttack_default_instance_;
class SUnitBuff;
struct SUnitBuffDefaultTypeInternal;
extern SUnitBuffDefaultTypeInternal _SUnitBuff_default_instance_;
class SUnitDemage;
struct SUnitDemageDefaultTypeInternal;
extern SUnitDemageDefaultTypeInternal _SUnitDemage_default_instance_;
class SUnitStates;
struct SUnitStatesDefaultTypeInternal;
extern SUnitStatesDefaultTypeInternal _SUnitStates_default_instance_;
class Unit;
struct UnitDefaultTypeInternal;
extern UnitDefaultTypeInternal _Unit_default_instance_;
class UnitState;
struct UnitStateDefaultTypeInternal;
extern UnitStateDefaultTypeInternal _UnitState_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Attack* Arena::CreateMaybeMessage<::protocol::Attack>(Arena*);
template<> ::protocol::Buff* Arena::CreateMaybeMessage<::protocol::Buff>(Arena*);
template<> ::protocol::CMovePotal* Arena::CreateMaybeMessage<::protocol::CMovePotal>(Arena*);
template<> ::protocol::CPlayerAttack* Arena::CreateMaybeMessage<::protocol::CPlayerAttack>(Arena*);
template<> ::protocol::Demage* Arena::CreateMaybeMessage<::protocol::Demage>(Arena*);
template<> ::protocol::Login* Arena::CreateMaybeMessage<::protocol::Login>(Arena*);
template<> ::protocol::Monster* Arena::CreateMaybeMessage<::protocol::Monster>(Arena*);
template<> ::protocol::Player* Arena::CreateMaybeMessage<::protocol::Player>(Arena*);
template<> ::protocol::Position* Arena::CreateMaybeMessage<::protocol::Position>(Arena*);
template<> ::protocol::SChat* Arena::CreateMaybeMessage<::protocol::SChat>(Arena*);
template<> ::protocol::SClosePlayer* Arena::CreateMaybeMessage<::protocol::SClosePlayer>(Arena*);
template<> ::protocol::SInsertplayer* Arena::CreateMaybeMessage<::protocol::SInsertplayer>(Arena*);
template<> ::protocol::SLoad* Arena::CreateMaybeMessage<::protocol::SLoad>(Arena*);
template<> ::protocol::SMove* Arena::CreateMaybeMessage<::protocol::SMove>(Arena*);
template<> ::protocol::SPlayerData* Arena::CreateMaybeMessage<::protocol::SPlayerData>(Arena*);
template<> ::protocol::SRoomQuest* Arena::CreateMaybeMessage<::protocol::SRoomQuest>(Arena*);
template<> ::protocol::SUnitAttack* Arena::CreateMaybeMessage<::protocol::SUnitAttack>(Arena*);
template<> ::protocol::SUnitBuff* Arena::CreateMaybeMessage<::protocol::SUnitBuff>(Arena*);
template<> ::protocol::SUnitDemage* Arena::CreateMaybeMessage<::protocol::SUnitDemage>(Arena*);
template<> ::protocol::SUnitStates* Arena::CreateMaybeMessage<::protocol::SUnitStates>(Arena*);
template<> ::protocol::Unit* Arena::CreateMaybeMessage<::protocol::Unit>(Arena*);
template<> ::protocol::UnitState* Arena::CreateMaybeMessage<::protocol::UnitState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum MessageCode : int {
  LOGIN = 0,
  S_LOAD = 1,
  S_INSERTPLAYER = 2,
  S_MOVE = 3,
  S_CHAT = 4,
  S_PLAYERDATA = 5,
  S_CLOSEPLAYER = 6,
  S_UNITSTATES = 7,
  C_PLAYERATTACK = 8,
  S_UNITATTACK = 9,
  S_UNITDEMAGE = 10,
  S_UNITBUFF = 11,
  S_ROOMQUEST = 12,
  C_MOVEPOTAL = 13,
  MessageCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageCode_IsValid(int value);
constexpr MessageCode MessageCode_MIN = LOGIN;
constexpr MessageCode MessageCode_MAX = C_MOVEPOTAL;
constexpr int MessageCode_ARRAYSIZE = MessageCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageCode_descriptor();
template<typename T>
inline const std::string& MessageCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageCode_descriptor(), enum_t_value);
}
inline bool MessageCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageCode>(
    MessageCode_descriptor(), name, value);
}
// ===================================================================

class Login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Login) */ {
 public:
  inline Login() : Login(nullptr) {}
  ~Login() override;
  explicit PROTOBUF_CONSTEXPR Login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Login(const Login& from);
  Login(Login&& from) noexcept
    : Login() {
    *this = ::std::move(from);
  }

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login& operator=(Login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Login& default_instance() {
    return *internal_default_instance();
  }
  static inline const Login* internal_default_instance() {
    return reinterpret_cast<const Login*>(
               &_Login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login& a, Login& b) {
    a.Swap(&b);
  }
  inline void Swap(Login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Login& from) {
    Login::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Login";
  }
  protected:
  explicit Login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kHpFieldNumber = 100,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 hp = 100;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t type_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Unit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Unit) */ {
 public:
  inline Unit() : Unit(nullptr) {}
  ~Unit() override;
  explicit PROTOBUF_CONSTEXPR Unit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Unit(const Unit& from);
  Unit(Unit&& from) noexcept
    : Unit() {
    *this = ::std::move(from);
  }

  inline Unit& operator=(const Unit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Unit& operator=(Unit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Unit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Unit* internal_default_instance() {
    return reinterpret_cast<const Unit*>(
               &_Unit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Unit& a, Unit& b) {
    a.Swap(&b);
  }
  inline void Swap(Unit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Unit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Unit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Unit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Unit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Unit& from) {
    Unit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Unit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Unit";
  }
  protected:
  explicit Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kPositionFieldNumber = 4,
    kTypeFieldNumber = 1,
    kHpFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 hp = 2;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // int32 code = 3;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Unit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::protocol::Position* position_;
    uint32_t type_;
    uint32_t hp_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
  };
  // .protocol.Unit unit = 1;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const ::protocol::Unit& unit() const;
  PROTOBUF_NODISCARD ::protocol::Unit* release_unit();
  ::protocol::Unit* mutable_unit();
  void set_allocated_unit(::protocol::Unit* unit);
  private:
  const ::protocol::Unit& _internal_unit() const;
  ::protocol::Unit* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      ::protocol::Unit* unit);
  ::protocol::Unit* unsafe_arena_release_unit();

  // @@protoc_insertion_point(class_scope:protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Unit* unit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Monster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Monster) */ {
 public:
  inline Monster() : Monster(nullptr) {}
  ~Monster() override;
  explicit PROTOBUF_CONSTEXPR Monster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Monster(const Monster& from);
  Monster(Monster&& from) noexcept
    : Monster() {
    *this = ::std::move(from);
  }

  inline Monster& operator=(const Monster& from) {
    CopyFrom(from);
    return *this;
  }
  inline Monster& operator=(Monster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Monster& default_instance() {
    return *internal_default_instance();
  }
  static inline const Monster* internal_default_instance() {
    return reinterpret_cast<const Monster*>(
               &_Monster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Monster& a, Monster& b) {
    a.Swap(&b);
  }
  inline void Swap(Monster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Monster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Monster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Monster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Monster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Monster& from) {
    Monster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Monster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Monster";
  }
  protected:
  explicit Monster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .protocol.Unit unit = 1;
  bool has_unit() const;
  private:
  bool _internal_has_unit() const;
  public:
  void clear_unit();
  const ::protocol::Unit& unit() const;
  PROTOBUF_NODISCARD ::protocol::Unit* release_unit();
  ::protocol::Unit* mutable_unit();
  void set_allocated_unit(::protocol::Unit* unit);
  private:
  const ::protocol::Unit& _internal_unit() const;
  ::protocol::Unit* _internal_mutable_unit();
  public:
  void unsafe_arena_set_allocated_unit(
      ::protocol::Unit* unit);
  ::protocol::Unit* unsafe_arena_release_unit();

  // uint32 state = 2;
  void clear_state();
  uint32_t state() const;
  void set_state(uint32_t value);
  private:
  uint32_t _internal_state() const;
  void _internal_set_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Monster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Unit* unit_;
    uint32_t state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SLoad final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SLoad) */ {
 public:
  inline SLoad() : SLoad(nullptr) {}
  ~SLoad() override;
  explicit PROTOBUF_CONSTEXPR SLoad(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SLoad(const SLoad& from);
  SLoad(SLoad&& from) noexcept
    : SLoad() {
    *this = ::std::move(from);
  }

  inline SLoad& operator=(const SLoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline SLoad& operator=(SLoad&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SLoad& default_instance() {
    return *internal_default_instance();
  }
  static inline const SLoad* internal_default_instance() {
    return reinterpret_cast<const SLoad*>(
               &_SLoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SLoad& a, SLoad& b) {
    a.Swap(&b);
  }
  inline void Swap(SLoad* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SLoad* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SLoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SLoad>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SLoad& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SLoad& from) {
    SLoad::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SLoad* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SLoad";
  }
  protected:
  explicit SLoad(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kMonsterFieldNumber = 2,
    kRoomIdFieldNumber = 3,
  };
  // repeated .protocol.Player player = 1;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::protocol::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
      mutable_player();
  private:
  const ::protocol::Player& _internal_player(int index) const;
  ::protocol::Player* _internal_add_player();
  public:
  const ::protocol::Player& player(int index) const;
  ::protocol::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
      player() const;

  // repeated .protocol.Monster monster = 2;
  int monster_size() const;
  private:
  int _internal_monster_size() const;
  public:
  void clear_monster();
  ::protocol::Monster* mutable_monster(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >*
      mutable_monster();
  private:
  const ::protocol::Monster& _internal_monster(int index) const;
  ::protocol::Monster* _internal_add_monster();
  public:
  const ::protocol::Monster& monster(int index) const;
  ::protocol::Monster* add_monster();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >&
      monster() const;

  // int32 room_id = 3;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SLoad)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player > player_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster > monster_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SInsertplayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SInsertplayer) */ {
 public:
  inline SInsertplayer() : SInsertplayer(nullptr) {}
  ~SInsertplayer() override;
  explicit PROTOBUF_CONSTEXPR SInsertplayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SInsertplayer(const SInsertplayer& from);
  SInsertplayer(SInsertplayer&& from) noexcept
    : SInsertplayer() {
    *this = ::std::move(from);
  }

  inline SInsertplayer& operator=(const SInsertplayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SInsertplayer& operator=(SInsertplayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SInsertplayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SInsertplayer* internal_default_instance() {
    return reinterpret_cast<const SInsertplayer*>(
               &_SInsertplayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SInsertplayer& a, SInsertplayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SInsertplayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SInsertplayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SInsertplayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SInsertplayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SInsertplayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SInsertplayer& from) {
    SInsertplayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SInsertplayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SInsertplayer";
  }
  protected:
  explicit SInsertplayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::protocol::Player& player() const;
  PROTOBUF_NODISCARD ::protocol::Player* release_player();
  ::protocol::Player* mutable_player();
  void set_allocated_player(::protocol::Player* player);
  private:
  const ::protocol::Player& _internal_player() const;
  ::protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::protocol::Player* player);
  ::protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:protocol.SInsertplayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Player* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SMove) */ {
 public:
  inline SMove() : SMove(nullptr) {}
  ~SMove() override;
  explicit PROTOBUF_CONSTEXPR SMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMove(const SMove& from);
  SMove(SMove&& from) noexcept
    : SMove() {
    *this = ::std::move(from);
  }

  inline SMove& operator=(const SMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMove& operator=(SMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMove* internal_default_instance() {
    return reinterpret_cast<const SMove*>(
               &_SMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SMove& a, SMove& b) {
    a.Swap(&b);
  }
  inline void Swap(SMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SMove& from) {
    SMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SMove";
  }
  protected:
  explicit SMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kCodeFieldNumber = 1,
    kIsMonsterFieldNumber = 3,
  };
  // .protocol.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // bool is_monster = 3;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Position* position_;
    int32_t code_;
    bool is_monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SChat) */ {
 public:
  inline SChat() : SChat(nullptr) {}
  ~SChat() override;
  explicit PROTOBUF_CONSTEXPR SChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SChat(const SChat& from);
  SChat(SChat&& from) noexcept
    : SChat() {
    *this = ::std::move(from);
  }

  inline SChat& operator=(const SChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SChat& operator=(SChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SChat* internal_default_instance() {
    return reinterpret_cast<const SChat*>(
               &_SChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SChat& a, SChat& b) {
    a.Swap(&b);
  }
  inline void Swap(SChat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SChat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SChat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SChat& from) {
    SChat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SChat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SChat";
  }
  protected:
  explicit SChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string text = 5;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 type = 1;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // int32 code = 2;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t type_;
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SPlayerData) */ {
 public:
  inline SPlayerData() : SPlayerData(nullptr) {}
  ~SPlayerData() override;
  explicit PROTOBUF_CONSTEXPR SPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SPlayerData(const SPlayerData& from);
  SPlayerData(SPlayerData&& from) noexcept
    : SPlayerData() {
    *this = ::std::move(from);
  }

  inline SPlayerData& operator=(const SPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SPlayerData& operator=(SPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SPlayerData* internal_default_instance() {
    return reinterpret_cast<const SPlayerData*>(
               &_SPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SPlayerData& a, SPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(SPlayerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SPlayerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SPlayerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SPlayerData& from) {
    SPlayerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SPlayerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SPlayerData";
  }
  protected:
  explicit SPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .protocol.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::protocol::Player& player() const;
  PROTOBUF_NODISCARD ::protocol::Player* release_player();
  ::protocol::Player* mutable_player();
  void set_allocated_player(::protocol::Player* player);
  private:
  const ::protocol::Player& _internal_player() const;
  ::protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::protocol::Player* player);
  ::protocol::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:protocol.SPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Player* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SClosePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SClosePlayer) */ {
 public:
  inline SClosePlayer() : SClosePlayer(nullptr) {}
  ~SClosePlayer() override;
  explicit PROTOBUF_CONSTEXPR SClosePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SClosePlayer(const SClosePlayer& from);
  SClosePlayer(SClosePlayer&& from) noexcept
    : SClosePlayer() {
    *this = ::std::move(from);
  }

  inline SClosePlayer& operator=(const SClosePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SClosePlayer& operator=(SClosePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SClosePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const SClosePlayer* internal_default_instance() {
    return reinterpret_cast<const SClosePlayer*>(
               &_SClosePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SClosePlayer& a, SClosePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(SClosePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SClosePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SClosePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SClosePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SClosePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SClosePlayer& from) {
    SClosePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SClosePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SClosePlayer";
  }
  protected:
  explicit SClosePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SClosePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class UnitState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UnitState) */ {
 public:
  inline UnitState() : UnitState(nullptr) {}
  ~UnitState() override;
  explicit PROTOBUF_CONSTEXPR UnitState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnitState(const UnitState& from);
  UnitState(UnitState&& from) noexcept
    : UnitState() {
    *this = ::std::move(from);
  }

  inline UnitState& operator=(const UnitState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnitState& operator=(UnitState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnitState& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnitState* internal_default_instance() {
    return reinterpret_cast<const UnitState*>(
               &_UnitState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UnitState& a, UnitState& b) {
    a.Swap(&b);
  }
  inline void Swap(UnitState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnitState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnitState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnitState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnitState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnitState& from) {
    UnitState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UnitState";
  }
  protected:
  explicit UnitState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterFieldNumber = 1,
    kPlayerFieldNumber = 2,
    kDemageFieldNumber = 4,
    kHealFieldNumber = 5,
    kIsMonsterFieldNumber = 10,
  };
  // .protocol.Monster monster = 1;
  bool has_monster() const;
  private:
  bool _internal_has_monster() const;
  public:
  void clear_monster();
  const ::protocol::Monster& monster() const;
  PROTOBUF_NODISCARD ::protocol::Monster* release_monster();
  ::protocol::Monster* mutable_monster();
  void set_allocated_monster(::protocol::Monster* monster);
  private:
  const ::protocol::Monster& _internal_monster() const;
  ::protocol::Monster* _internal_mutable_monster();
  public:
  void unsafe_arena_set_allocated_monster(
      ::protocol::Monster* monster);
  ::protocol::Monster* unsafe_arena_release_monster();

  // .protocol.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::protocol::Player& player() const;
  PROTOBUF_NODISCARD ::protocol::Player* release_player();
  ::protocol::Player* mutable_player();
  void set_allocated_player(::protocol::Player* player);
  private:
  const ::protocol::Player& _internal_player() const;
  ::protocol::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::protocol::Player* player);
  ::protocol::Player* unsafe_arena_release_player();

  // int32 demage = 4;
  void clear_demage();
  int32_t demage() const;
  void set_demage(int32_t value);
  private:
  int32_t _internal_demage() const;
  void _internal_set_demage(int32_t value);
  public:

  // int32 heal = 5;
  void clear_heal();
  int32_t heal() const;
  void set_heal(int32_t value);
  private:
  int32_t _internal_heal() const;
  void _internal_set_heal(int32_t value);
  public:

  // bool is_monster = 10;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.UnitState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Monster* monster_;
    ::protocol::Player* player_;
    int32_t demage_;
    int32_t heal_;
    bool is_monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SUnitStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SUnitStates) */ {
 public:
  inline SUnitStates() : SUnitStates(nullptr) {}
  ~SUnitStates() override;
  explicit PROTOBUF_CONSTEXPR SUnitStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SUnitStates(const SUnitStates& from);
  SUnitStates(SUnitStates&& from) noexcept
    : SUnitStates() {
    *this = ::std::move(from);
  }

  inline SUnitStates& operator=(const SUnitStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUnitStates& operator=(SUnitStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SUnitStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const SUnitStates* internal_default_instance() {
    return reinterpret_cast<const SUnitStates*>(
               &_SUnitStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SUnitStates& a, SUnitStates& b) {
    a.Swap(&b);
  }
  inline void Swap(SUnitStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUnitStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SUnitStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SUnitStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SUnitStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SUnitStates& from) {
    SUnitStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUnitStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SUnitStates";
  }
  protected:
  explicit SUnitStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitStateFieldNumber = 1,
  };
  // repeated .protocol.UnitState unit_state = 1;
  int unit_state_size() const;
  private:
  int _internal_unit_state_size() const;
  public:
  void clear_unit_state();
  ::protocol::UnitState* mutable_unit_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::UnitState >*
      mutable_unit_state();
  private:
  const ::protocol::UnitState& _internal_unit_state(int index) const;
  ::protocol::UnitState* _internal_add_unit_state();
  public:
  const ::protocol::UnitState& unit_state(int index) const;
  ::protocol::UnitState* add_unit_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::UnitState >&
      unit_state() const;

  // @@protoc_insertion_point(class_scope:protocol.SUnitStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::UnitState > unit_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Attack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Attack) */ {
 public:
  inline Attack() : Attack(nullptr) {}
  ~Attack() override;
  explicit PROTOBUF_CONSTEXPR Attack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Attack(const Attack& from);
  Attack(Attack&& from) noexcept
    : Attack() {
    *this = ::std::move(from);
  }

  inline Attack& operator=(const Attack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Attack& operator=(Attack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Attack& default_instance() {
    return *internal_default_instance();
  }
  static inline const Attack* internal_default_instance() {
    return reinterpret_cast<const Attack*>(
               &_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Attack& a, Attack& b) {
    a.Swap(&b);
  }
  inline void Swap(Attack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Attack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Attack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Attack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Attack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Attack& from) {
    Attack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Attack";
  }
  protected:
  explicit Attack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kSkillCodeFieldNumber = 2,
    kIsMonsterFieldNumber = 3,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 skill_code = 2;
  void clear_skill_code();
  int32_t skill_code() const;
  void set_skill_code(int32_t value);
  private:
  int32_t _internal_skill_code() const;
  void _internal_set_skill_code(int32_t value);
  public:

  // bool is_monster = 3;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Attack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    int32_t skill_code_;
    bool is_monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Buff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Buff) */ {
 public:
  inline Buff() : Buff(nullptr) {}
  ~Buff() override;
  explicit PROTOBUF_CONSTEXPR Buff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Buff(const Buff& from);
  Buff(Buff&& from) noexcept
    : Buff() {
    *this = ::std::move(from);
  }

  inline Buff& operator=(const Buff& from) {
    CopyFrom(from);
    return *this;
  }
  inline Buff& operator=(Buff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Buff& default_instance() {
    return *internal_default_instance();
  }
  static inline const Buff* internal_default_instance() {
    return reinterpret_cast<const Buff*>(
               &_Buff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Buff& a, Buff& b) {
    a.Swap(&b);
  }
  inline void Swap(Buff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Buff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Buff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Buff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Buff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Buff& from) {
    Buff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Buff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Buff";
  }
  protected:
  explicit Buff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kSkillCodeFieldNumber = 2,
    kIsMonsterFieldNumber = 3,
    kHealFieldNumber = 4,
    kHpFieldNumber = 5,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 skill_code = 2;
  void clear_skill_code();
  int32_t skill_code() const;
  void set_skill_code(int32_t value);
  private:
  int32_t _internal_skill_code() const;
  void _internal_set_skill_code(int32_t value);
  public:

  // bool is_monster = 3;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // int32 heal = 4;
  void clear_heal();
  int32_t heal() const;
  void set_heal(int32_t value);
  private:
  int32_t _internal_heal() const;
  void _internal_set_heal(int32_t value);
  public:

  // int32 hp = 5;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Buff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    int32_t skill_code_;
    bool is_monster_;
    int32_t heal_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class CPlayerAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CPlayerAttack) */ {
 public:
  inline CPlayerAttack() : CPlayerAttack(nullptr) {}
  ~CPlayerAttack() override;
  explicit PROTOBUF_CONSTEXPR CPlayerAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CPlayerAttack(const CPlayerAttack& from);
  CPlayerAttack(CPlayerAttack&& from) noexcept
    : CPlayerAttack() {
    *this = ::std::move(from);
  }

  inline CPlayerAttack& operator=(const CPlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CPlayerAttack& operator=(CPlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CPlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CPlayerAttack* internal_default_instance() {
    return reinterpret_cast<const CPlayerAttack*>(
               &_CPlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CPlayerAttack& a, CPlayerAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(CPlayerAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CPlayerAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CPlayerAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CPlayerAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CPlayerAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CPlayerAttack& from) {
    CPlayerAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CPlayerAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CPlayerAttack";
  }
  protected:
  explicit CPlayerAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 4,
    kCodeFieldNumber = 1,
    kSkillCodeFieldNumber = 2,
    kTargetCodeFieldNumber = 3,
  };
  // .protocol.Position position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::protocol::Position& position() const;
  PROTOBUF_NODISCARD ::protocol::Position* release_position();
  ::protocol::Position* mutable_position();
  void set_allocated_position(::protocol::Position* position);
  private:
  const ::protocol::Position& _internal_position() const;
  ::protocol::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::protocol::Position* position);
  ::protocol::Position* unsafe_arena_release_position();

  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 skill_code = 2;
  void clear_skill_code();
  int32_t skill_code() const;
  void set_skill_code(int32_t value);
  private:
  int32_t _internal_skill_code() const;
  void _internal_set_skill_code(int32_t value);
  public:

  // int32 target_code = 3;
  void clear_target_code();
  int32_t target_code() const;
  void set_target_code(int32_t value);
  private:
  int32_t _internal_target_code() const;
  void _internal_set_target_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.CPlayerAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Position* position_;
    int32_t code_;
    int32_t skill_code_;
    int32_t target_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SUnitAttack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SUnitAttack) */ {
 public:
  inline SUnitAttack() : SUnitAttack(nullptr) {}
  ~SUnitAttack() override;
  explicit PROTOBUF_CONSTEXPR SUnitAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SUnitAttack(const SUnitAttack& from);
  SUnitAttack(SUnitAttack&& from) noexcept
    : SUnitAttack() {
    *this = ::std::move(from);
  }

  inline SUnitAttack& operator=(const SUnitAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUnitAttack& operator=(SUnitAttack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SUnitAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const SUnitAttack* internal_default_instance() {
    return reinterpret_cast<const SUnitAttack*>(
               &_SUnitAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SUnitAttack& a, SUnitAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(SUnitAttack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUnitAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SUnitAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SUnitAttack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SUnitAttack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SUnitAttack& from) {
    SUnitAttack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUnitAttack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SUnitAttack";
  }
  protected:
  explicit SUnitAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackFieldNumber = 1,
  };
  // repeated .protocol.Attack attack = 1;
  int attack_size() const;
  private:
  int _internal_attack_size() const;
  public:
  void clear_attack();
  ::protocol::Attack* mutable_attack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Attack >*
      mutable_attack();
  private:
  const ::protocol::Attack& _internal_attack(int index) const;
  ::protocol::Attack* _internal_add_attack();
  public:
  const ::protocol::Attack& attack(int index) const;
  ::protocol::Attack* add_attack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Attack >&
      attack() const;

  // @@protoc_insertion_point(class_scope:protocol.SUnitAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Attack > attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SUnitBuff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SUnitBuff) */ {
 public:
  inline SUnitBuff() : SUnitBuff(nullptr) {}
  ~SUnitBuff() override;
  explicit PROTOBUF_CONSTEXPR SUnitBuff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SUnitBuff(const SUnitBuff& from);
  SUnitBuff(SUnitBuff&& from) noexcept
    : SUnitBuff() {
    *this = ::std::move(from);
  }

  inline SUnitBuff& operator=(const SUnitBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUnitBuff& operator=(SUnitBuff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SUnitBuff& default_instance() {
    return *internal_default_instance();
  }
  static inline const SUnitBuff* internal_default_instance() {
    return reinterpret_cast<const SUnitBuff*>(
               &_SUnitBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SUnitBuff& a, SUnitBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(SUnitBuff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUnitBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SUnitBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SUnitBuff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SUnitBuff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SUnitBuff& from) {
    SUnitBuff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUnitBuff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SUnitBuff";
  }
  protected:
  explicit SUnitBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffFieldNumber = 1,
  };
  // repeated .protocol.Buff buff = 1;
  int buff_size() const;
  private:
  int _internal_buff_size() const;
  public:
  void clear_buff();
  ::protocol::Buff* mutable_buff(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Buff >*
      mutable_buff();
  private:
  const ::protocol::Buff& _internal_buff(int index) const;
  ::protocol::Buff* _internal_add_buff();
  public:
  const ::protocol::Buff& buff(int index) const;
  ::protocol::Buff* add_buff();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Buff >&
      buff() const;

  // @@protoc_insertion_point(class_scope:protocol.SUnitBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Buff > buff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class Demage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Demage) */ {
 public:
  inline Demage() : Demage(nullptr) {}
  ~Demage() override;
  explicit PROTOBUF_CONSTEXPR Demage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Demage(const Demage& from);
  Demage(Demage&& from) noexcept
    : Demage() {
    *this = ::std::move(from);
  }

  inline Demage& operator=(const Demage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Demage& operator=(Demage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Demage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Demage* internal_default_instance() {
    return reinterpret_cast<const Demage*>(
               &_Demage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Demage& a, Demage& b) {
    a.Swap(&b);
  }
  inline void Swap(Demage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Demage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Demage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Demage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Demage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Demage& from) {
    Demage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Demage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Demage";
  }
  protected:
  explicit Demage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kDemageFieldNumber = 2,
    kIsMonsterFieldNumber = 3,
  };
  // int32 code = 1;
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // int32 demage = 2;
  void clear_demage();
  int32_t demage() const;
  void set_demage(int32_t value);
  private:
  int32_t _internal_demage() const;
  void _internal_set_demage(int32_t value);
  public:

  // bool is_monster = 3;
  void clear_is_monster();
  bool is_monster() const;
  void set_is_monster(bool value);
  private:
  bool _internal_is_monster() const;
  void _internal_set_is_monster(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.Demage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t code_;
    int32_t demage_;
    bool is_monster_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SUnitDemage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SUnitDemage) */ {
 public:
  inline SUnitDemage() : SUnitDemage(nullptr) {}
  ~SUnitDemage() override;
  explicit PROTOBUF_CONSTEXPR SUnitDemage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SUnitDemage(const SUnitDemage& from);
  SUnitDemage(SUnitDemage&& from) noexcept
    : SUnitDemage() {
    *this = ::std::move(from);
  }

  inline SUnitDemage& operator=(const SUnitDemage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SUnitDemage& operator=(SUnitDemage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SUnitDemage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SUnitDemage* internal_default_instance() {
    return reinterpret_cast<const SUnitDemage*>(
               &_SUnitDemage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SUnitDemage& a, SUnitDemage& b) {
    a.Swap(&b);
  }
  inline void Swap(SUnitDemage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SUnitDemage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SUnitDemage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SUnitDemage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SUnitDemage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SUnitDemage& from) {
    SUnitDemage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SUnitDemage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SUnitDemage";
  }
  protected:
  explicit SUnitDemage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemageFieldNumber = 1,
  };
  // .protocol.Demage demage = 1;
  bool has_demage() const;
  private:
  bool _internal_has_demage() const;
  public:
  void clear_demage();
  const ::protocol::Demage& demage() const;
  PROTOBUF_NODISCARD ::protocol::Demage* release_demage();
  ::protocol::Demage* mutable_demage();
  void set_allocated_demage(::protocol::Demage* demage);
  private:
  const ::protocol::Demage& _internal_demage() const;
  ::protocol::Demage* _internal_mutable_demage();
  public:
  void unsafe_arena_set_allocated_demage(
      ::protocol::Demage* demage);
  ::protocol::Demage* unsafe_arena_release_demage();

  // @@protoc_insertion_point(class_scope:protocol.SUnitDemage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::protocol::Demage* demage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class SRoomQuest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SRoomQuest) */ {
 public:
  inline SRoomQuest() : SRoomQuest(nullptr) {}
  ~SRoomQuest() override;
  explicit PROTOBUF_CONSTEXPR SRoomQuest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SRoomQuest(const SRoomQuest& from);
  SRoomQuest(SRoomQuest&& from) noexcept
    : SRoomQuest() {
    *this = ::std::move(from);
  }

  inline SRoomQuest& operator=(const SRoomQuest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SRoomQuest& operator=(SRoomQuest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SRoomQuest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SRoomQuest* internal_default_instance() {
    return reinterpret_cast<const SRoomQuest*>(
               &_SRoomQuest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SRoomQuest& a, SRoomQuest& b) {
    a.Swap(&b);
  }
  inline void Swap(SRoomQuest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SRoomQuest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SRoomQuest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SRoomQuest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SRoomQuest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SRoomQuest& from) {
    SRoomQuest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SRoomQuest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SRoomQuest";
  }
  protected:
  explicit SRoomQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsClearFieldNumber = 1,
    kKillCountFieldNumber = 2,
    kSumKillFieldNumber = 3,
  };
  // bool is_clear = 1;
  void clear_is_clear();
  bool is_clear() const;
  void set_is_clear(bool value);
  private:
  bool _internal_is_clear() const;
  void _internal_set_is_clear(bool value);
  public:

  // int32 kill_count = 2;
  void clear_kill_count();
  int32_t kill_count() const;
  void set_kill_count(int32_t value);
  private:
  int32_t _internal_kill_count() const;
  void _internal_set_kill_count(int32_t value);
  public:

  // int32 sum_kill = 3;
  void clear_sum_kill();
  int32_t sum_kill() const;
  void set_sum_kill(int32_t value);
  private:
  int32_t _internal_sum_kill() const;
  void _internal_set_sum_kill(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.SRoomQuest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_clear_;
    int32_t kill_count_;
    int32_t sum_kill_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// -------------------------------------------------------------------

class CMovePotal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CMovePotal) */ {
 public:
  inline CMovePotal() : CMovePotal(nullptr) {}
  ~CMovePotal() override;
  explicit PROTOBUF_CONSTEXPR CMovePotal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMovePotal(const CMovePotal& from);
  CMovePotal(CMovePotal&& from) noexcept
    : CMovePotal() {
    *this = ::std::move(from);
  }

  inline CMovePotal& operator=(const CMovePotal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMovePotal& operator=(CMovePotal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMovePotal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMovePotal* internal_default_instance() {
    return reinterpret_cast<const CMovePotal*>(
               &_CMovePotal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMovePotal& a, CMovePotal& b) {
    a.Swap(&b);
  }
  inline void Swap(CMovePotal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMovePotal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMovePotal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMovePotal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMovePotal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMovePotal& from) {
    CMovePotal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMovePotal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CMovePotal";
  }
  protected:
  explicit CMovePotal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreRoomIdFieldNumber = 1,
    kNextRoomIdFieldNumber = 2,
  };
  // int32 pre_room_id = 1;
  void clear_pre_room_id();
  int32_t pre_room_id() const;
  void set_pre_room_id(int32_t value);
  private:
  int32_t _internal_pre_room_id() const;
  void _internal_set_pre_room_id(int32_t value);
  public:

  // int32 next_room_id = 2;
  void clear_next_room_id();
  int32_t next_room_id() const;
  void set_next_room_id(int32_t value);
  private:
  int32_t _internal_next_room_id() const;
  void _internal_set_next_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.CMovePotal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t pre_room_id_;
    int32_t next_room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_GameService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login

// string name = 1;
inline void Login::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Login::name() const {
  // @@protoc_insertion_point(field_get:protocol.Login.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Login::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Login.name)
}
inline std::string* Login::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.Login.name)
  return _s;
}
inline const std::string& Login::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Login::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Login::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Login::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Login.name)
  return _impl_.name_.Release();
}
inline void Login::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Login.name)
}

// int32 type = 2;
inline void Login::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t Login::_internal_type() const {
  return _impl_.type_;
}
inline int32_t Login::type() const {
  // @@protoc_insertion_point(field_get:protocol.Login.type)
  return _internal_type();
}
inline void Login::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void Login::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.Login.type)
}

// int32 hp = 100;
inline void Login::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t Login::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t Login::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Login.hp)
  return _internal_hp();
}
inline void Login::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void Login::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Login.hp)
}

// -------------------------------------------------------------------

// Position

// float x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline float Position::_internal_x() const {
  return _impl_.x_;
}
inline float Position::x() const {
  // @@protoc_insertion_point(field_get:protocol.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:protocol.Position.x)
}

// float y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline float Position::_internal_y() const {
  return _impl_.y_;
}
inline float Position::y() const {
  // @@protoc_insertion_point(field_get:protocol.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:protocol.Position.y)
}

// float z = 3;
inline void Position::clear_z() {
  _impl_.z_ = 0;
}
inline float Position::_internal_z() const {
  return _impl_.z_;
}
inline float Position::z() const {
  // @@protoc_insertion_point(field_get:protocol.Position.z)
  return _internal_z();
}
inline void Position::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Position::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:protocol.Position.z)
}

// float yaw = 4;
inline void Position::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Position::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Position::yaw() const {
  // @@protoc_insertion_point(field_get:protocol.Position.yaw)
  return _internal_yaw();
}
inline void Position::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Position::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:protocol.Position.yaw)
}

// -------------------------------------------------------------------

// Unit

// uint32 type = 1;
inline void Unit::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Unit::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Unit::type() const {
  // @@protoc_insertion_point(field_get:protocol.Unit.type)
  return _internal_type();
}
inline void Unit::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Unit::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.Unit.type)
}

// uint32 hp = 2;
inline void Unit::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t Unit::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t Unit::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Unit.hp)
  return _internal_hp();
}
inline void Unit::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void Unit::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Unit.hp)
}

// int32 code = 3;
inline void Unit::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Unit::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Unit::code() const {
  // @@protoc_insertion_point(field_get:protocol.Unit.code)
  return _internal_code();
}
inline void Unit::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Unit::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Unit.code)
}

// .protocol.Position position = 4;
inline bool Unit::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Unit::has_position() const {
  return _internal_has_position();
}
inline void Unit::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& Unit::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& Unit::position() const {
  // @@protoc_insertion_point(field_get:protocol.Unit.position)
  return _internal_position();
}
inline void Unit::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Unit.position)
}
inline ::protocol::Position* Unit::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* Unit::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.Unit.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* Unit::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* Unit::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.Unit.position)
  return _msg;
}
inline void Unit::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.Unit.position)
}

// string name = 5;
inline void Unit::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Unit::name() const {
  // @@protoc_insertion_point(field_get:protocol.Unit.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Unit::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.Unit.name)
}
inline std::string* Unit::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protocol.Unit.name)
  return _s;
}
inline const std::string& Unit::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Unit::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Unit::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Unit::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Unit.name)
  return _impl_.name_.Release();
}
inline void Unit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.Unit.name)
}

// -------------------------------------------------------------------

// Player

// .protocol.Unit unit = 1;
inline bool Player::_internal_has_unit() const {
  return this != internal_default_instance() && _impl_.unit_ != nullptr;
}
inline bool Player::has_unit() const {
  return _internal_has_unit();
}
inline void Player::clear_unit() {
  if (GetArenaForAllocation() == nullptr && _impl_.unit_ != nullptr) {
    delete _impl_.unit_;
  }
  _impl_.unit_ = nullptr;
}
inline const ::protocol::Unit& Player::_internal_unit() const {
  const ::protocol::Unit* p = _impl_.unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Unit&>(
      ::protocol::_Unit_default_instance_);
}
inline const ::protocol::Unit& Player::unit() const {
  // @@protoc_insertion_point(field_get:protocol.Player.unit)
  return _internal_unit();
}
inline void Player::unsafe_arena_set_allocated_unit(
    ::protocol::Unit* unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unit_);
  }
  _impl_.unit_ = unit;
  if (unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Player.unit)
}
inline ::protocol::Unit* Player::release_unit() {
  
  ::protocol::Unit* temp = _impl_.unit_;
  _impl_.unit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Unit* Player::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:protocol.Player.unit)
  
  ::protocol::Unit* temp = _impl_.unit_;
  _impl_.unit_ = nullptr;
  return temp;
}
inline ::protocol::Unit* Player::_internal_mutable_unit() {
  
  if (_impl_.unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Unit>(GetArenaForAllocation());
    _impl_.unit_ = p;
  }
  return _impl_.unit_;
}
inline ::protocol::Unit* Player::mutable_unit() {
  ::protocol::Unit* _msg = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:protocol.Player.unit)
  return _msg;
}
inline void Player::set_allocated_unit(::protocol::Unit* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unit_;
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit);
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:protocol.Player.unit)
}

// -------------------------------------------------------------------

// Monster

// .protocol.Unit unit = 1;
inline bool Monster::_internal_has_unit() const {
  return this != internal_default_instance() && _impl_.unit_ != nullptr;
}
inline bool Monster::has_unit() const {
  return _internal_has_unit();
}
inline void Monster::clear_unit() {
  if (GetArenaForAllocation() == nullptr && _impl_.unit_ != nullptr) {
    delete _impl_.unit_;
  }
  _impl_.unit_ = nullptr;
}
inline const ::protocol::Unit& Monster::_internal_unit() const {
  const ::protocol::Unit* p = _impl_.unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Unit&>(
      ::protocol::_Unit_default_instance_);
}
inline const ::protocol::Unit& Monster::unit() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.unit)
  return _internal_unit();
}
inline void Monster::unsafe_arena_set_allocated_unit(
    ::protocol::Unit* unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unit_);
  }
  _impl_.unit_ = unit;
  if (unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Monster.unit)
}
inline ::protocol::Unit* Monster::release_unit() {
  
  ::protocol::Unit* temp = _impl_.unit_;
  _impl_.unit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Unit* Monster::unsafe_arena_release_unit() {
  // @@protoc_insertion_point(field_release:protocol.Monster.unit)
  
  ::protocol::Unit* temp = _impl_.unit_;
  _impl_.unit_ = nullptr;
  return temp;
}
inline ::protocol::Unit* Monster::_internal_mutable_unit() {
  
  if (_impl_.unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Unit>(GetArenaForAllocation());
    _impl_.unit_ = p;
  }
  return _impl_.unit_;
}
inline ::protocol::Unit* Monster::mutable_unit() {
  ::protocol::Unit* _msg = _internal_mutable_unit();
  // @@protoc_insertion_point(field_mutable:protocol.Monster.unit)
  return _msg;
}
inline void Monster::set_allocated_unit(::protocol::Unit* unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.unit_;
  }
  if (unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unit);
    if (message_arena != submessage_arena) {
      unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:protocol.Monster.unit)
}

// uint32 state = 2;
inline void Monster::clear_state() {
  _impl_.state_ = 0u;
}
inline uint32_t Monster::_internal_state() const {
  return _impl_.state_;
}
inline uint32_t Monster::state() const {
  // @@protoc_insertion_point(field_get:protocol.Monster.state)
  return _internal_state();
}
inline void Monster::_internal_set_state(uint32_t value) {
  
  _impl_.state_ = value;
}
inline void Monster::set_state(uint32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.Monster.state)
}

// -------------------------------------------------------------------

// SLoad

// repeated .protocol.Player player = 1;
inline int SLoad::_internal_player_size() const {
  return _impl_.player_.size();
}
inline int SLoad::player_size() const {
  return _internal_player_size();
}
inline void SLoad::clear_player() {
  _impl_.player_.Clear();
}
inline ::protocol::Player* SLoad::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SLoad.player)
  return _impl_.player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >*
SLoad::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SLoad.player)
  return &_impl_.player_;
}
inline const ::protocol::Player& SLoad::_internal_player(int index) const {
  return _impl_.player_.Get(index);
}
inline const ::protocol::Player& SLoad::player(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SLoad.player)
  return _internal_player(index);
}
inline ::protocol::Player* SLoad::_internal_add_player() {
  return _impl_.player_.Add();
}
inline ::protocol::Player* SLoad::add_player() {
  ::protocol::Player* _add = _internal_add_player();
  // @@protoc_insertion_point(field_add:protocol.SLoad.player)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Player >&
SLoad::player() const {
  // @@protoc_insertion_point(field_list:protocol.SLoad.player)
  return _impl_.player_;
}

// repeated .protocol.Monster monster = 2;
inline int SLoad::_internal_monster_size() const {
  return _impl_.monster_.size();
}
inline int SLoad::monster_size() const {
  return _internal_monster_size();
}
inline void SLoad::clear_monster() {
  _impl_.monster_.Clear();
}
inline ::protocol::Monster* SLoad::mutable_monster(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SLoad.monster)
  return _impl_.monster_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >*
SLoad::mutable_monster() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SLoad.monster)
  return &_impl_.monster_;
}
inline const ::protocol::Monster& SLoad::_internal_monster(int index) const {
  return _impl_.monster_.Get(index);
}
inline const ::protocol::Monster& SLoad::monster(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SLoad.monster)
  return _internal_monster(index);
}
inline ::protocol::Monster* SLoad::_internal_add_monster() {
  return _impl_.monster_.Add();
}
inline ::protocol::Monster* SLoad::add_monster() {
  ::protocol::Monster* _add = _internal_add_monster();
  // @@protoc_insertion_point(field_add:protocol.SLoad.monster)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Monster >&
SLoad::monster() const {
  // @@protoc_insertion_point(field_list:protocol.SLoad.monster)
  return _impl_.monster_;
}

// int32 room_id = 3;
inline void SLoad::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t SLoad::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t SLoad::room_id() const {
  // @@protoc_insertion_point(field_get:protocol.SLoad.room_id)
  return _internal_room_id();
}
inline void SLoad::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void SLoad::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:protocol.SLoad.room_id)
}

// -------------------------------------------------------------------

// SInsertplayer

// .protocol.Player player = 1;
inline bool SInsertplayer::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool SInsertplayer::has_player() const {
  return _internal_has_player();
}
inline void SInsertplayer::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::protocol::Player& SInsertplayer::_internal_player() const {
  const ::protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Player&>(
      ::protocol::_Player_default_instance_);
}
inline const ::protocol::Player& SInsertplayer::player() const {
  // @@protoc_insertion_point(field_get:protocol.SInsertplayer.player)
  return _internal_player();
}
inline void SInsertplayer::unsafe_arena_set_allocated_player(
    ::protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SInsertplayer.player)
}
inline ::protocol::Player* SInsertplayer::release_player() {
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Player* SInsertplayer::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:protocol.SInsertplayer.player)
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::protocol::Player* SInsertplayer::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::protocol::Player* SInsertplayer::mutable_player() {
  ::protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:protocol.SInsertplayer.player)
  return _msg;
}
inline void SInsertplayer::set_allocated_player(::protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.SInsertplayer.player)
}

// -------------------------------------------------------------------

// SMove

// int32 code = 1;
inline void SMove::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SMove::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SMove::code() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.code)
  return _internal_code();
}
inline void SMove::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SMove::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SMove.code)
}

// .protocol.Position position = 2;
inline bool SMove::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool SMove::has_position() const {
  return _internal_has_position();
}
inline void SMove::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& SMove::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& SMove::position() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.position)
  return _internal_position();
}
inline void SMove::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SMove.position)
}
inline ::protocol::Position* SMove::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* SMove::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.SMove.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* SMove::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* SMove::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.SMove.position)
  return _msg;
}
inline void SMove::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.SMove.position)
}

// bool is_monster = 3;
inline void SMove::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool SMove::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool SMove::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.SMove.is_monster)
  return _internal_is_monster();
}
inline void SMove::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void SMove::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.SMove.is_monster)
}

// -------------------------------------------------------------------

// SChat

// uint32 type = 1;
inline void SChat::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t SChat::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t SChat::type() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.type)
  return _internal_type();
}
inline void SChat::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void SChat::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.SChat.type)
}

// int32 code = 2;
inline void SChat::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SChat::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SChat::code() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.code)
  return _internal_code();
}
inline void SChat::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SChat::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SChat.code)
}

// string text = 5;
inline void SChat::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& SChat::text() const {
  // @@protoc_insertion_point(field_get:protocol.SChat.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SChat::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protocol.SChat.text)
}
inline std::string* SChat::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:protocol.SChat.text)
  return _s;
}
inline const std::string& SChat::_internal_text() const {
  return _impl_.text_.Get();
}
inline void SChat::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* SChat::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* SChat::release_text() {
  // @@protoc_insertion_point(field_release:protocol.SChat.text)
  return _impl_.text_.Release();
}
inline void SChat::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protocol.SChat.text)
}

// -------------------------------------------------------------------

// SPlayerData

// .protocol.Player player = 1;
inline bool SPlayerData::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool SPlayerData::has_player() const {
  return _internal_has_player();
}
inline void SPlayerData::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::protocol::Player& SPlayerData::_internal_player() const {
  const ::protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Player&>(
      ::protocol::_Player_default_instance_);
}
inline const ::protocol::Player& SPlayerData::player() const {
  // @@protoc_insertion_point(field_get:protocol.SPlayerData.player)
  return _internal_player();
}
inline void SPlayerData::unsafe_arena_set_allocated_player(
    ::protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SPlayerData.player)
}
inline ::protocol::Player* SPlayerData::release_player() {
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Player* SPlayerData::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:protocol.SPlayerData.player)
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::protocol::Player* SPlayerData::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::protocol::Player* SPlayerData::mutable_player() {
  ::protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:protocol.SPlayerData.player)
  return _msg;
}
inline void SPlayerData::set_allocated_player(::protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.SPlayerData.player)
}

// -------------------------------------------------------------------

// SClosePlayer

// int32 code = 1;
inline void SClosePlayer::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t SClosePlayer::_internal_code() const {
  return _impl_.code_;
}
inline int32_t SClosePlayer::code() const {
  // @@protoc_insertion_point(field_get:protocol.SClosePlayer.code)
  return _internal_code();
}
inline void SClosePlayer::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void SClosePlayer::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.SClosePlayer.code)
}

// -------------------------------------------------------------------

// UnitState

// .protocol.Monster monster = 1;
inline bool UnitState::_internal_has_monster() const {
  return this != internal_default_instance() && _impl_.monster_ != nullptr;
}
inline bool UnitState::has_monster() const {
  return _internal_has_monster();
}
inline void UnitState::clear_monster() {
  if (GetArenaForAllocation() == nullptr && _impl_.monster_ != nullptr) {
    delete _impl_.monster_;
  }
  _impl_.monster_ = nullptr;
}
inline const ::protocol::Monster& UnitState::_internal_monster() const {
  const ::protocol::Monster* p = _impl_.monster_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Monster&>(
      ::protocol::_Monster_default_instance_);
}
inline const ::protocol::Monster& UnitState::monster() const {
  // @@protoc_insertion_point(field_get:protocol.UnitState.monster)
  return _internal_monster();
}
inline void UnitState::unsafe_arena_set_allocated_monster(
    ::protocol::Monster* monster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monster_);
  }
  _impl_.monster_ = monster;
  if (monster) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.UnitState.monster)
}
inline ::protocol::Monster* UnitState::release_monster() {
  
  ::protocol::Monster* temp = _impl_.monster_;
  _impl_.monster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Monster* UnitState::unsafe_arena_release_monster() {
  // @@protoc_insertion_point(field_release:protocol.UnitState.monster)
  
  ::protocol::Monster* temp = _impl_.monster_;
  _impl_.monster_ = nullptr;
  return temp;
}
inline ::protocol::Monster* UnitState::_internal_mutable_monster() {
  
  if (_impl_.monster_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Monster>(GetArenaForAllocation());
    _impl_.monster_ = p;
  }
  return _impl_.monster_;
}
inline ::protocol::Monster* UnitState::mutable_monster() {
  ::protocol::Monster* _msg = _internal_mutable_monster();
  // @@protoc_insertion_point(field_mutable:protocol.UnitState.monster)
  return _msg;
}
inline void UnitState::set_allocated_monster(::protocol::Monster* monster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monster_;
  }
  if (monster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monster);
    if (message_arena != submessage_arena) {
      monster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monster_ = monster;
  // @@protoc_insertion_point(field_set_allocated:protocol.UnitState.monster)
}

// .protocol.Player player = 2;
inline bool UnitState::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool UnitState::has_player() const {
  return _internal_has_player();
}
inline void UnitState::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::protocol::Player& UnitState::_internal_player() const {
  const ::protocol::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Player&>(
      ::protocol::_Player_default_instance_);
}
inline const ::protocol::Player& UnitState::player() const {
  // @@protoc_insertion_point(field_get:protocol.UnitState.player)
  return _internal_player();
}
inline void UnitState::unsafe_arena_set_allocated_player(
    ::protocol::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.UnitState.player)
}
inline ::protocol::Player* UnitState::release_player() {
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Player* UnitState::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:protocol.UnitState.player)
  
  ::protocol::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::protocol::Player* UnitState::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::protocol::Player* UnitState::mutable_player() {
  ::protocol::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:protocol.UnitState.player)
  return _msg;
}
inline void UnitState::set_allocated_player(::protocol::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:protocol.UnitState.player)
}

// int32 demage = 4;
inline void UnitState::clear_demage() {
  _impl_.demage_ = 0;
}
inline int32_t UnitState::_internal_demage() const {
  return _impl_.demage_;
}
inline int32_t UnitState::demage() const {
  // @@protoc_insertion_point(field_get:protocol.UnitState.demage)
  return _internal_demage();
}
inline void UnitState::_internal_set_demage(int32_t value) {
  
  _impl_.demage_ = value;
}
inline void UnitState::set_demage(int32_t value) {
  _internal_set_demage(value);
  // @@protoc_insertion_point(field_set:protocol.UnitState.demage)
}

// int32 heal = 5;
inline void UnitState::clear_heal() {
  _impl_.heal_ = 0;
}
inline int32_t UnitState::_internal_heal() const {
  return _impl_.heal_;
}
inline int32_t UnitState::heal() const {
  // @@protoc_insertion_point(field_get:protocol.UnitState.heal)
  return _internal_heal();
}
inline void UnitState::_internal_set_heal(int32_t value) {
  
  _impl_.heal_ = value;
}
inline void UnitState::set_heal(int32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:protocol.UnitState.heal)
}

// bool is_monster = 10;
inline void UnitState::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool UnitState::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool UnitState::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.UnitState.is_monster)
  return _internal_is_monster();
}
inline void UnitState::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void UnitState::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.UnitState.is_monster)
}

// -------------------------------------------------------------------

// SUnitStates

// repeated .protocol.UnitState unit_state = 1;
inline int SUnitStates::_internal_unit_state_size() const {
  return _impl_.unit_state_.size();
}
inline int SUnitStates::unit_state_size() const {
  return _internal_unit_state_size();
}
inline void SUnitStates::clear_unit_state() {
  _impl_.unit_state_.Clear();
}
inline ::protocol::UnitState* SUnitStates::mutable_unit_state(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SUnitStates.unit_state)
  return _impl_.unit_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::UnitState >*
SUnitStates::mutable_unit_state() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SUnitStates.unit_state)
  return &_impl_.unit_state_;
}
inline const ::protocol::UnitState& SUnitStates::_internal_unit_state(int index) const {
  return _impl_.unit_state_.Get(index);
}
inline const ::protocol::UnitState& SUnitStates::unit_state(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SUnitStates.unit_state)
  return _internal_unit_state(index);
}
inline ::protocol::UnitState* SUnitStates::_internal_add_unit_state() {
  return _impl_.unit_state_.Add();
}
inline ::protocol::UnitState* SUnitStates::add_unit_state() {
  ::protocol::UnitState* _add = _internal_add_unit_state();
  // @@protoc_insertion_point(field_add:protocol.SUnitStates.unit_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::UnitState >&
SUnitStates::unit_state() const {
  // @@protoc_insertion_point(field_list:protocol.SUnitStates.unit_state)
  return _impl_.unit_state_;
}

// -------------------------------------------------------------------

// Attack

// int32 code = 1;
inline void Attack::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Attack::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Attack::code() const {
  // @@protoc_insertion_point(field_get:protocol.Attack.code)
  return _internal_code();
}
inline void Attack::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Attack::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Attack.code)
}

// int32 skill_code = 2;
inline void Attack::clear_skill_code() {
  _impl_.skill_code_ = 0;
}
inline int32_t Attack::_internal_skill_code() const {
  return _impl_.skill_code_;
}
inline int32_t Attack::skill_code() const {
  // @@protoc_insertion_point(field_get:protocol.Attack.skill_code)
  return _internal_skill_code();
}
inline void Attack::_internal_set_skill_code(int32_t value) {
  
  _impl_.skill_code_ = value;
}
inline void Attack::set_skill_code(int32_t value) {
  _internal_set_skill_code(value);
  // @@protoc_insertion_point(field_set:protocol.Attack.skill_code)
}

// bool is_monster = 3;
inline void Attack::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool Attack::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool Attack::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.Attack.is_monster)
  return _internal_is_monster();
}
inline void Attack::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void Attack::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.Attack.is_monster)
}

// -------------------------------------------------------------------

// Buff

// int32 code = 1;
inline void Buff::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Buff::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Buff::code() const {
  // @@protoc_insertion_point(field_get:protocol.Buff.code)
  return _internal_code();
}
inline void Buff::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Buff::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Buff.code)
}

// int32 skill_code = 2;
inline void Buff::clear_skill_code() {
  _impl_.skill_code_ = 0;
}
inline int32_t Buff::_internal_skill_code() const {
  return _impl_.skill_code_;
}
inline int32_t Buff::skill_code() const {
  // @@protoc_insertion_point(field_get:protocol.Buff.skill_code)
  return _internal_skill_code();
}
inline void Buff::_internal_set_skill_code(int32_t value) {
  
  _impl_.skill_code_ = value;
}
inline void Buff::set_skill_code(int32_t value) {
  _internal_set_skill_code(value);
  // @@protoc_insertion_point(field_set:protocol.Buff.skill_code)
}

// bool is_monster = 3;
inline void Buff::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool Buff::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool Buff::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.Buff.is_monster)
  return _internal_is_monster();
}
inline void Buff::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void Buff::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.Buff.is_monster)
}

// int32 heal = 4;
inline void Buff::clear_heal() {
  _impl_.heal_ = 0;
}
inline int32_t Buff::_internal_heal() const {
  return _impl_.heal_;
}
inline int32_t Buff::heal() const {
  // @@protoc_insertion_point(field_get:protocol.Buff.heal)
  return _internal_heal();
}
inline void Buff::_internal_set_heal(int32_t value) {
  
  _impl_.heal_ = value;
}
inline void Buff::set_heal(int32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:protocol.Buff.heal)
}

// int32 hp = 5;
inline void Buff::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t Buff::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t Buff::hp() const {
  // @@protoc_insertion_point(field_get:protocol.Buff.hp)
  return _internal_hp();
}
inline void Buff::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void Buff::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:protocol.Buff.hp)
}

// -------------------------------------------------------------------

// CPlayerAttack

// int32 code = 1;
inline void CPlayerAttack::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t CPlayerAttack::_internal_code() const {
  return _impl_.code_;
}
inline int32_t CPlayerAttack::code() const {
  // @@protoc_insertion_point(field_get:protocol.CPlayerAttack.code)
  return _internal_code();
}
inline void CPlayerAttack::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void CPlayerAttack::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.CPlayerAttack.code)
}

// int32 skill_code = 2;
inline void CPlayerAttack::clear_skill_code() {
  _impl_.skill_code_ = 0;
}
inline int32_t CPlayerAttack::_internal_skill_code() const {
  return _impl_.skill_code_;
}
inline int32_t CPlayerAttack::skill_code() const {
  // @@protoc_insertion_point(field_get:protocol.CPlayerAttack.skill_code)
  return _internal_skill_code();
}
inline void CPlayerAttack::_internal_set_skill_code(int32_t value) {
  
  _impl_.skill_code_ = value;
}
inline void CPlayerAttack::set_skill_code(int32_t value) {
  _internal_set_skill_code(value);
  // @@protoc_insertion_point(field_set:protocol.CPlayerAttack.skill_code)
}

// int32 target_code = 3;
inline void CPlayerAttack::clear_target_code() {
  _impl_.target_code_ = 0;
}
inline int32_t CPlayerAttack::_internal_target_code() const {
  return _impl_.target_code_;
}
inline int32_t CPlayerAttack::target_code() const {
  // @@protoc_insertion_point(field_get:protocol.CPlayerAttack.target_code)
  return _internal_target_code();
}
inline void CPlayerAttack::_internal_set_target_code(int32_t value) {
  
  _impl_.target_code_ = value;
}
inline void CPlayerAttack::set_target_code(int32_t value) {
  _internal_set_target_code(value);
  // @@protoc_insertion_point(field_set:protocol.CPlayerAttack.target_code)
}

// .protocol.Position position = 4;
inline bool CPlayerAttack::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CPlayerAttack::has_position() const {
  return _internal_has_position();
}
inline void CPlayerAttack::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::protocol::Position& CPlayerAttack::_internal_position() const {
  const ::protocol::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Position&>(
      ::protocol::_Position_default_instance_);
}
inline const ::protocol::Position& CPlayerAttack::position() const {
  // @@protoc_insertion_point(field_get:protocol.CPlayerAttack.position)
  return _internal_position();
}
inline void CPlayerAttack::unsafe_arena_set_allocated_position(
    ::protocol::Position* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.CPlayerAttack.position)
}
inline ::protocol::Position* CPlayerAttack::release_position() {
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Position* CPlayerAttack::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:protocol.CPlayerAttack.position)
  
  ::protocol::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::protocol::Position* CPlayerAttack::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Position>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::protocol::Position* CPlayerAttack::mutable_position() {
  ::protocol::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:protocol.CPlayerAttack.position)
  return _msg;
}
inline void CPlayerAttack::set_allocated_position(::protocol::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:protocol.CPlayerAttack.position)
}

// -------------------------------------------------------------------

// SUnitAttack

// repeated .protocol.Attack attack = 1;
inline int SUnitAttack::_internal_attack_size() const {
  return _impl_.attack_.size();
}
inline int SUnitAttack::attack_size() const {
  return _internal_attack_size();
}
inline void SUnitAttack::clear_attack() {
  _impl_.attack_.Clear();
}
inline ::protocol::Attack* SUnitAttack::mutable_attack(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SUnitAttack.attack)
  return _impl_.attack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Attack >*
SUnitAttack::mutable_attack() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SUnitAttack.attack)
  return &_impl_.attack_;
}
inline const ::protocol::Attack& SUnitAttack::_internal_attack(int index) const {
  return _impl_.attack_.Get(index);
}
inline const ::protocol::Attack& SUnitAttack::attack(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SUnitAttack.attack)
  return _internal_attack(index);
}
inline ::protocol::Attack* SUnitAttack::_internal_add_attack() {
  return _impl_.attack_.Add();
}
inline ::protocol::Attack* SUnitAttack::add_attack() {
  ::protocol::Attack* _add = _internal_add_attack();
  // @@protoc_insertion_point(field_add:protocol.SUnitAttack.attack)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Attack >&
SUnitAttack::attack() const {
  // @@protoc_insertion_point(field_list:protocol.SUnitAttack.attack)
  return _impl_.attack_;
}

// -------------------------------------------------------------------

// SUnitBuff

// repeated .protocol.Buff buff = 1;
inline int SUnitBuff::_internal_buff_size() const {
  return _impl_.buff_.size();
}
inline int SUnitBuff::buff_size() const {
  return _internal_buff_size();
}
inline void SUnitBuff::clear_buff() {
  _impl_.buff_.Clear();
}
inline ::protocol::Buff* SUnitBuff::mutable_buff(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SUnitBuff.buff)
  return _impl_.buff_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Buff >*
SUnitBuff::mutable_buff() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SUnitBuff.buff)
  return &_impl_.buff_;
}
inline const ::protocol::Buff& SUnitBuff::_internal_buff(int index) const {
  return _impl_.buff_.Get(index);
}
inline const ::protocol::Buff& SUnitBuff::buff(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SUnitBuff.buff)
  return _internal_buff(index);
}
inline ::protocol::Buff* SUnitBuff::_internal_add_buff() {
  return _impl_.buff_.Add();
}
inline ::protocol::Buff* SUnitBuff::add_buff() {
  ::protocol::Buff* _add = _internal_add_buff();
  // @@protoc_insertion_point(field_add:protocol.SUnitBuff.buff)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Buff >&
SUnitBuff::buff() const {
  // @@protoc_insertion_point(field_list:protocol.SUnitBuff.buff)
  return _impl_.buff_;
}

// -------------------------------------------------------------------

// Demage

// int32 code = 1;
inline void Demage::clear_code() {
  _impl_.code_ = 0;
}
inline int32_t Demage::_internal_code() const {
  return _impl_.code_;
}
inline int32_t Demage::code() const {
  // @@protoc_insertion_point(field_get:protocol.Demage.code)
  return _internal_code();
}
inline void Demage::_internal_set_code(int32_t value) {
  
  _impl_.code_ = value;
}
inline void Demage::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:protocol.Demage.code)
}

// int32 demage = 2;
inline void Demage::clear_demage() {
  _impl_.demage_ = 0;
}
inline int32_t Demage::_internal_demage() const {
  return _impl_.demage_;
}
inline int32_t Demage::demage() const {
  // @@protoc_insertion_point(field_get:protocol.Demage.demage)
  return _internal_demage();
}
inline void Demage::_internal_set_demage(int32_t value) {
  
  _impl_.demage_ = value;
}
inline void Demage::set_demage(int32_t value) {
  _internal_set_demage(value);
  // @@protoc_insertion_point(field_set:protocol.Demage.demage)
}

// bool is_monster = 3;
inline void Demage::clear_is_monster() {
  _impl_.is_monster_ = false;
}
inline bool Demage::_internal_is_monster() const {
  return _impl_.is_monster_;
}
inline bool Demage::is_monster() const {
  // @@protoc_insertion_point(field_get:protocol.Demage.is_monster)
  return _internal_is_monster();
}
inline void Demage::_internal_set_is_monster(bool value) {
  
  _impl_.is_monster_ = value;
}
inline void Demage::set_is_monster(bool value) {
  _internal_set_is_monster(value);
  // @@protoc_insertion_point(field_set:protocol.Demage.is_monster)
}

// -------------------------------------------------------------------

// SUnitDemage

// .protocol.Demage demage = 1;
inline bool SUnitDemage::_internal_has_demage() const {
  return this != internal_default_instance() && _impl_.demage_ != nullptr;
}
inline bool SUnitDemage::has_demage() const {
  return _internal_has_demage();
}
inline void SUnitDemage::clear_demage() {
  if (GetArenaForAllocation() == nullptr && _impl_.demage_ != nullptr) {
    delete _impl_.demage_;
  }
  _impl_.demage_ = nullptr;
}
inline const ::protocol::Demage& SUnitDemage::_internal_demage() const {
  const ::protocol::Demage* p = _impl_.demage_;
  return p != nullptr ? *p : reinterpret_cast<const ::protocol::Demage&>(
      ::protocol::_Demage_default_instance_);
}
inline const ::protocol::Demage& SUnitDemage::demage() const {
  // @@protoc_insertion_point(field_get:protocol.SUnitDemage.demage)
  return _internal_demage();
}
inline void SUnitDemage::unsafe_arena_set_allocated_demage(
    ::protocol::Demage* demage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.demage_);
  }
  _impl_.demage_ = demage;
  if (demage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.SUnitDemage.demage)
}
inline ::protocol::Demage* SUnitDemage::release_demage() {
  
  ::protocol::Demage* temp = _impl_.demage_;
  _impl_.demage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protocol::Demage* SUnitDemage::unsafe_arena_release_demage() {
  // @@protoc_insertion_point(field_release:protocol.SUnitDemage.demage)
  
  ::protocol::Demage* temp = _impl_.demage_;
  _impl_.demage_ = nullptr;
  return temp;
}
inline ::protocol::Demage* SUnitDemage::_internal_mutable_demage() {
  
  if (_impl_.demage_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Demage>(GetArenaForAllocation());
    _impl_.demage_ = p;
  }
  return _impl_.demage_;
}
inline ::protocol::Demage* SUnitDemage::mutable_demage() {
  ::protocol::Demage* _msg = _internal_mutable_demage();
  // @@protoc_insertion_point(field_mutable:protocol.SUnitDemage.demage)
  return _msg;
}
inline void SUnitDemage::set_allocated_demage(::protocol::Demage* demage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.demage_;
  }
  if (demage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(demage);
    if (message_arena != submessage_arena) {
      demage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demage, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.demage_ = demage;
  // @@protoc_insertion_point(field_set_allocated:protocol.SUnitDemage.demage)
}

// -------------------------------------------------------------------

// SRoomQuest

// bool is_clear = 1;
inline void SRoomQuest::clear_is_clear() {
  _impl_.is_clear_ = false;
}
inline bool SRoomQuest::_internal_is_clear() const {
  return _impl_.is_clear_;
}
inline bool SRoomQuest::is_clear() const {
  // @@protoc_insertion_point(field_get:protocol.SRoomQuest.is_clear)
  return _internal_is_clear();
}
inline void SRoomQuest::_internal_set_is_clear(bool value) {
  
  _impl_.is_clear_ = value;
}
inline void SRoomQuest::set_is_clear(bool value) {
  _internal_set_is_clear(value);
  // @@protoc_insertion_point(field_set:protocol.SRoomQuest.is_clear)
}

// int32 kill_count = 2;
inline void SRoomQuest::clear_kill_count() {
  _impl_.kill_count_ = 0;
}
inline int32_t SRoomQuest::_internal_kill_count() const {
  return _impl_.kill_count_;
}
inline int32_t SRoomQuest::kill_count() const {
  // @@protoc_insertion_point(field_get:protocol.SRoomQuest.kill_count)
  return _internal_kill_count();
}
inline void SRoomQuest::_internal_set_kill_count(int32_t value) {
  
  _impl_.kill_count_ = value;
}
inline void SRoomQuest::set_kill_count(int32_t value) {
  _internal_set_kill_count(value);
  // @@protoc_insertion_point(field_set:protocol.SRoomQuest.kill_count)
}

// int32 sum_kill = 3;
inline void SRoomQuest::clear_sum_kill() {
  _impl_.sum_kill_ = 0;
}
inline int32_t SRoomQuest::_internal_sum_kill() const {
  return _impl_.sum_kill_;
}
inline int32_t SRoomQuest::sum_kill() const {
  // @@protoc_insertion_point(field_get:protocol.SRoomQuest.sum_kill)
  return _internal_sum_kill();
}
inline void SRoomQuest::_internal_set_sum_kill(int32_t value) {
  
  _impl_.sum_kill_ = value;
}
inline void SRoomQuest::set_sum_kill(int32_t value) {
  _internal_set_sum_kill(value);
  // @@protoc_insertion_point(field_set:protocol.SRoomQuest.sum_kill)
}

// -------------------------------------------------------------------

// CMovePotal

// int32 pre_room_id = 1;
inline void CMovePotal::clear_pre_room_id() {
  _impl_.pre_room_id_ = 0;
}
inline int32_t CMovePotal::_internal_pre_room_id() const {
  return _impl_.pre_room_id_;
}
inline int32_t CMovePotal::pre_room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CMovePotal.pre_room_id)
  return _internal_pre_room_id();
}
inline void CMovePotal::_internal_set_pre_room_id(int32_t value) {
  
  _impl_.pre_room_id_ = value;
}
inline void CMovePotal::set_pre_room_id(int32_t value) {
  _internal_set_pre_room_id(value);
  // @@protoc_insertion_point(field_set:protocol.CMovePotal.pre_room_id)
}

// int32 next_room_id = 2;
inline void CMovePotal::clear_next_room_id() {
  _impl_.next_room_id_ = 0;
}
inline int32_t CMovePotal::_internal_next_room_id() const {
  return _impl_.next_room_id_;
}
inline int32_t CMovePotal::next_room_id() const {
  // @@protoc_insertion_point(field_get:protocol.CMovePotal.next_room_id)
  return _internal_next_room_id();
}
inline void CMovePotal::_internal_set_next_room_id(int32_t value) {
  
  _impl_.next_room_id_ = value;
}
inline void CMovePotal::set_next_room_id(int32_t value) {
  _internal_set_next_room_id(value);
  // @@protoc_insertion_point(field_set:protocol.CMovePotal.next_room_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::MessageCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::MessageCode>() {
  return ::protocol::MessageCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameService_2eproto
