// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
namespace Protocol {
class TestPlayerInfo;
struct TestPlayerInfoDefaultTypeInternal;
extern TestPlayerInfoDefaultTypeInternal _TestPlayerInfo_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::TestPlayerInfo* Arena::CreateMaybeMessage<::Protocol::TestPlayerInfo>(Arena*);
template<> ::Protocol::Vector* Arena::CreateMaybeMessage<::Protocol::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum Type : int {
  DEFAULT = 0,
  PLAYER = 1,
  TESTPLAYER = 2,
  MONSTER = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = DEFAULT;
constexpr Type Type_MAX = MONSTER;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class TestPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.TestPlayerInfo) */ {
 public:
  inline TestPlayerInfo() : TestPlayerInfo(nullptr) {}
  ~TestPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR TestPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestPlayerInfo(const TestPlayerInfo& from);
  TestPlayerInfo(TestPlayerInfo&& from) noexcept
    : TestPlayerInfo() {
    *this = ::std::move(from);
  }

  inline TestPlayerInfo& operator=(const TestPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPlayerInfo& operator=(TestPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const TestPlayerInfo*>(
               &_TestPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestPlayerInfo& a, TestPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestPlayerInfo& from) {
    TestPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.TestPlayerInfo";
  }
  protected:
  explicit TestPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 5,
    kVectorFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated int32 arr = 5;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  private:
  int32_t _internal_arr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_arr() const;
  void _internal_add_arr(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_arr();
  public:
  int32_t arr(int index) const;
  void set_arr(int index, int32_t value);
  void add_arr(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      arr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_arr();

  // .Protocol.Vector vector = 3;
  bool has_vector() const;
  private:
  bool _internal_has_vector() const;
  public:
  void clear_vector();
  const ::Protocol::Vector& vector() const;
  PROTOBUF_NODISCARD ::Protocol::Vector* release_vector();
  ::Protocol::Vector* mutable_vector();
  void set_allocated_vector(::Protocol::Vector* vector);
  private:
  const ::Protocol::Vector& _internal_vector() const;
  ::Protocol::Vector* _internal_mutable_vector();
  public:
  void unsafe_arena_set_allocated_vector(
      ::Protocol::Vector* vector);
  ::Protocol::Vector* unsafe_arena_release_vector();

  // .Protocol.Type type = 1;
  void clear_type();
  ::Protocol::Type type() const;
  void set_type(::Protocol::Type value);
  private:
  ::Protocol::Type _internal_type() const;
  void _internal_set_type(::Protocol::Type value);
  public:

  // uint32 id = 2;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.TestPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > arr_;
    mutable std::atomic<int> _arr_cached_byte_size_;
    ::Protocol::Vector* vector_;
    int type_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit PROTOBUF_CONSTEXPR Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector& from) {
    Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYewFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yew = 4;
  void clear_yew();
  float yew() const;
  void set_yew(float value);
  private:
  float _internal_yew() const;
  void _internal_set_yew(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float yew_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestPlayerInfo

// .Protocol.Type type = 1;
inline void TestPlayerInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::Type TestPlayerInfo::_internal_type() const {
  return static_cast< ::Protocol::Type >(_impl_.type_);
}
inline ::Protocol::Type TestPlayerInfo::type() const {
  // @@protoc_insertion_point(field_get:Protocol.TestPlayerInfo.type)
  return _internal_type();
}
inline void TestPlayerInfo::_internal_set_type(::Protocol::Type value) {
  
  _impl_.type_ = value;
}
inline void TestPlayerInfo::set_type(::Protocol::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.TestPlayerInfo.type)
}

// uint32 id = 2;
inline void TestPlayerInfo::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t TestPlayerInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t TestPlayerInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.TestPlayerInfo.id)
  return _internal_id();
}
inline void TestPlayerInfo::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void TestPlayerInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.TestPlayerInfo.id)
}

// .Protocol.Vector vector = 3;
inline bool TestPlayerInfo::_internal_has_vector() const {
  return this != internal_default_instance() && _impl_.vector_ != nullptr;
}
inline bool TestPlayerInfo::has_vector() const {
  return _internal_has_vector();
}
inline void TestPlayerInfo::clear_vector() {
  if (GetArenaForAllocation() == nullptr && _impl_.vector_ != nullptr) {
    delete _impl_.vector_;
  }
  _impl_.vector_ = nullptr;
}
inline const ::Protocol::Vector& TestPlayerInfo::_internal_vector() const {
  const ::Protocol::Vector* p = _impl_.vector_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector&>(
      ::Protocol::_Vector_default_instance_);
}
inline const ::Protocol::Vector& TestPlayerInfo::vector() const {
  // @@protoc_insertion_point(field_get:Protocol.TestPlayerInfo.vector)
  return _internal_vector();
}
inline void TestPlayerInfo::unsafe_arena_set_allocated_vector(
    ::Protocol::Vector* vector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vector_);
  }
  _impl_.vector_ = vector;
  if (vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.TestPlayerInfo.vector)
}
inline ::Protocol::Vector* TestPlayerInfo::release_vector() {
  
  ::Protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector* TestPlayerInfo::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_release:Protocol.TestPlayerInfo.vector)
  
  ::Protocol::Vector* temp = _impl_.vector_;
  _impl_.vector_ = nullptr;
  return temp;
}
inline ::Protocol::Vector* TestPlayerInfo::_internal_mutable_vector() {
  
  if (_impl_.vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector>(GetArenaForAllocation());
    _impl_.vector_ = p;
  }
  return _impl_.vector_;
}
inline ::Protocol::Vector* TestPlayerInfo::mutable_vector() {
  ::Protocol::Vector* _msg = _internal_mutable_vector();
  // @@protoc_insertion_point(field_mutable:Protocol.TestPlayerInfo.vector)
  return _msg;
}
inline void TestPlayerInfo::set_allocated_vector(::Protocol::Vector* vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vector_;
  }
  if (vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector);
    if (message_arena != submessage_arena) {
      vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.vector_ = vector;
  // @@protoc_insertion_point(field_set_allocated:Protocol.TestPlayerInfo.vector)
}

// repeated int32 arr = 5;
inline int TestPlayerInfo::_internal_arr_size() const {
  return _impl_.arr_.size();
}
inline int TestPlayerInfo::arr_size() const {
  return _internal_arr_size();
}
inline void TestPlayerInfo::clear_arr() {
  _impl_.arr_.Clear();
}
inline int32_t TestPlayerInfo::_internal_arr(int index) const {
  return _impl_.arr_.Get(index);
}
inline int32_t TestPlayerInfo::arr(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.TestPlayerInfo.arr)
  return _internal_arr(index);
}
inline void TestPlayerInfo::set_arr(int index, int32_t value) {
  _impl_.arr_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.TestPlayerInfo.arr)
}
inline void TestPlayerInfo::_internal_add_arr(int32_t value) {
  _impl_.arr_.Add(value);
}
inline void TestPlayerInfo::add_arr(int32_t value) {
  _internal_add_arr(value);
  // @@protoc_insertion_point(field_add:Protocol.TestPlayerInfo.arr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPlayerInfo::_internal_arr() const {
  return _impl_.arr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TestPlayerInfo::arr() const {
  // @@protoc_insertion_point(field_list:Protocol.TestPlayerInfo.arr)
  return _internal_arr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPlayerInfo::_internal_mutable_arr() {
  return &_impl_.arr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TestPlayerInfo::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.TestPlayerInfo.arr)
  return _internal_mutable_arr();
}

// -------------------------------------------------------------------

// Vector

// float x = 1;
inline void Vector::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector::_internal_x() const {
  return _impl_.x_;
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.x)
  return _internal_x();
}
inline void Vector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.x)
}

// float y = 2;
inline void Vector::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector::_internal_y() const {
  return _impl_.y_;
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.y)
  return _internal_y();
}
inline void Vector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.y)
}

// float z = 3;
inline void Vector::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector::_internal_z() const {
  return _impl_.z_;
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.z)
  return _internal_z();
}
inline void Vector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.z)
}

// float yew = 4;
inline void Vector::clear_yew() {
  _impl_.yew_ = 0;
}
inline float Vector::_internal_yew() const {
  return _impl_.yew_;
}
inline float Vector::yew() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector.yew)
  return _internal_yew();
}
inline void Vector::_internal_set_yew(float value) {
  
  _impl_.yew_ = value;
}
inline void Vector::set_yew(float value) {
  _internal_set_yew(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector.yew)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::Type>() {
  return ::Protocol::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
